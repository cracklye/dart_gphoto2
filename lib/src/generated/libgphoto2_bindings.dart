// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Wrapper on the Gphoto2 libraries
class LibGPhoto2 {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibGPhoto2(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibGPhoto2.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  int gp_port_info_new(ffi.Pointer<GPPortInfo> info) {
    return _gp_port_info_new(info);
  }

  late final _gp_port_info_newPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPortInfo>)>>(
        'gp_port_info_new',
      );
  late final _gp_port_info_new = _gp_port_info_newPtr
      .asFunction<int Function(ffi.Pointer<GPPortInfo>)>();

  int gp_port_info_get_name(
    GPPortInfo info,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
  ) {
    return _gp_port_info_get_name(info, name);
  }

  late final _gp_port_info_get_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(GPPortInfo, ffi.Pointer<ffi.Pointer<ffi.Char>>)
        >
      >('gp_port_info_get_name');
  late final _gp_port_info_get_name = _gp_port_info_get_namePtr
      .asFunction<
        int Function(GPPortInfo, ffi.Pointer<ffi.Pointer<ffi.Char>>)
      >();

  int gp_port_info_set_name(GPPortInfo info, ffi.Pointer<ffi.Char> name) {
    return _gp_port_info_set_name(info, name);
  }

  late final _gp_port_info_set_namePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(GPPortInfo, ffi.Pointer<ffi.Char>)>
      >('gp_port_info_set_name');
  late final _gp_port_info_set_name = _gp_port_info_set_namePtr
      .asFunction<int Function(GPPortInfo, ffi.Pointer<ffi.Char>)>();

  int gp_port_info_get_path(
    GPPortInfo info,
    ffi.Pointer<ffi.Pointer<ffi.Char>> path,
  ) {
    return _gp_port_info_get_path(info, path);
  }

  late final _gp_port_info_get_pathPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(GPPortInfo, ffi.Pointer<ffi.Pointer<ffi.Char>>)
        >
      >('gp_port_info_get_path');
  late final _gp_port_info_get_path = _gp_port_info_get_pathPtr
      .asFunction<
        int Function(GPPortInfo, ffi.Pointer<ffi.Pointer<ffi.Char>>)
      >();

  int gp_port_info_set_path(GPPortInfo info, ffi.Pointer<ffi.Char> path) {
    return _gp_port_info_set_path(info, path);
  }

  late final _gp_port_info_set_pathPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(GPPortInfo, ffi.Pointer<ffi.Char>)>
      >('gp_port_info_set_path');
  late final _gp_port_info_set_path = _gp_port_info_set_pathPtr
      .asFunction<int Function(GPPortInfo, ffi.Pointer<ffi.Char>)>();

  int gp_port_info_get_type(
    GPPortInfo info,
    ffi.Pointer<ffi.UnsignedInt> type,
  ) {
    return _gp_port_info_get_type(info, type);
  }

  late final _gp_port_info_get_typePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(GPPortInfo, ffi.Pointer<ffi.UnsignedInt>)
        >
      >('gp_port_info_get_type');
  late final _gp_port_info_get_type = _gp_port_info_get_typePtr
      .asFunction<int Function(GPPortInfo, ffi.Pointer<ffi.UnsignedInt>)>();

  int gp_port_info_set_type(GPPortInfo info, GPPortType type) {
    return _gp_port_info_set_type(info, type.value);
  }

  late final _gp_port_info_set_typePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(GPPortInfo, ffi.UnsignedInt)>
      >('gp_port_info_set_type');
  late final _gp_port_info_set_type = _gp_port_info_set_typePtr
      .asFunction<int Function(GPPortInfo, int)>();

  int gp_port_info_get_library_filename(
    GPPortInfo info,
    ffi.Pointer<ffi.Pointer<ffi.Char>> lib,
  ) {
    return _gp_port_info_get_library_filename(info, lib);
  }

  late final _gp_port_info_get_library_filenamePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(GPPortInfo, ffi.Pointer<ffi.Pointer<ffi.Char>>)
        >
      >('gp_port_info_get_library_filename');
  late final _gp_port_info_get_library_filename =
      _gp_port_info_get_library_filenamePtr
          .asFunction<
            int Function(GPPortInfo, ffi.Pointer<ffi.Pointer<ffi.Char>>)
          >();

  int gp_port_info_set_library_filename(
    GPPortInfo info,
    ffi.Pointer<ffi.Char> lib,
  ) {
    return _gp_port_info_set_library_filename(info, lib);
  }

  late final _gp_port_info_set_library_filenamePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(GPPortInfo, ffi.Pointer<ffi.Char>)>
      >('gp_port_info_set_library_filename');
  late final _gp_port_info_set_library_filename =
      _gp_port_info_set_library_filenamePtr
          .asFunction<int Function(GPPortInfo, ffi.Pointer<ffi.Char>)>();

  int gp_port_info_list_new(ffi.Pointer<ffi.Pointer<GPPortInfoList>> list) {
    return _gp_port_info_list_new(list);
  }

  late final _gp_port_info_list_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<GPPortInfoList>>)
        >
      >('gp_port_info_list_new');
  late final _gp_port_info_list_new = _gp_port_info_list_newPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<GPPortInfoList>>)>();

  int gp_port_info_list_free(ffi.Pointer<GPPortInfoList> list) {
    return _gp_port_info_list_free(list);
  }

  late final _gp_port_info_list_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPortInfoList>)>
      >('gp_port_info_list_free');
  late final _gp_port_info_list_free = _gp_port_info_list_freePtr
      .asFunction<int Function(ffi.Pointer<GPPortInfoList>)>();

  int gp_port_info_list_append(
    ffi.Pointer<GPPortInfoList> list,
    GPPortInfo info,
  ) {
    return _gp_port_info_list_append(list, info);
  }

  late final _gp_port_info_list_appendPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPortInfoList>, GPPortInfo)
        >
      >('gp_port_info_list_append');
  late final _gp_port_info_list_append = _gp_port_info_list_appendPtr
      .asFunction<int Function(ffi.Pointer<GPPortInfoList>, GPPortInfo)>();

  int gp_port_info_list_load(ffi.Pointer<GPPortInfoList> list) {
    return _gp_port_info_list_load(list);
  }

  late final _gp_port_info_list_loadPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPortInfoList>)>
      >('gp_port_info_list_load');
  late final _gp_port_info_list_load = _gp_port_info_list_loadPtr
      .asFunction<int Function(ffi.Pointer<GPPortInfoList>)>();

  int gp_port_info_list_count(ffi.Pointer<GPPortInfoList> list) {
    return _gp_port_info_list_count(list);
  }

  late final _gp_port_info_list_countPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPortInfoList>)>
      >('gp_port_info_list_count');
  late final _gp_port_info_list_count = _gp_port_info_list_countPtr
      .asFunction<int Function(ffi.Pointer<GPPortInfoList>)>();

  int gp_port_info_list_lookup_path(
    ffi.Pointer<GPPortInfoList> list,
    ffi.Pointer<ffi.Char> path,
  ) {
    return _gp_port_info_list_lookup_path(list, path);
  }

  late final _gp_port_info_list_lookup_pathPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPortInfoList>, ffi.Pointer<ffi.Char>)
        >
      >('gp_port_info_list_lookup_path');
  late final _gp_port_info_list_lookup_path = _gp_port_info_list_lookup_pathPtr
      .asFunction<
        int Function(ffi.Pointer<GPPortInfoList>, ffi.Pointer<ffi.Char>)
      >();

  int gp_port_info_list_lookup_name(
    ffi.Pointer<GPPortInfoList> list,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gp_port_info_list_lookup_name(list, name);
  }

  late final _gp_port_info_list_lookup_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPortInfoList>, ffi.Pointer<ffi.Char>)
        >
      >('gp_port_info_list_lookup_name');
  late final _gp_port_info_list_lookup_name = _gp_port_info_list_lookup_namePtr
      .asFunction<
        int Function(ffi.Pointer<GPPortInfoList>, ffi.Pointer<ffi.Char>)
      >();

  int gp_port_info_list_get_info(
    ffi.Pointer<GPPortInfoList> list,
    int n,
    ffi.Pointer<GPPortInfo> info,
  ) {
    return _gp_port_info_list_get_info(list, n, info);
  }

  late final _gp_port_info_list_get_infoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<GPPortInfoList>,
            ffi.Int,
            ffi.Pointer<GPPortInfo>,
          )
        >
      >('gp_port_info_list_get_info');
  late final _gp_port_info_list_get_info = _gp_port_info_list_get_infoPtr
      .asFunction<
        int Function(ffi.Pointer<GPPortInfoList>, int, ffi.Pointer<GPPortInfo>)
      >();

  ffi.Pointer<ffi.Char> gp_port_message_codeset(ffi.Pointer<ffi.Char> arg0) {
    return _gp_port_message_codeset(arg0);
  }

  late final _gp_port_message_codesetPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('gp_port_message_codeset');
  late final _gp_port_message_codeset = _gp_port_message_codesetPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int gp_port_init_localedir(ffi.Pointer<ffi.Char> localedir) {
    return _gp_port_init_localedir(localedir);
  }

  late final _gp_port_init_localedirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'gp_port_init_localedir',
      );
  late final _gp_port_init_localedir = _gp_port_init_localedirPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int gp_port_new(ffi.Pointer<ffi.Pointer<GPPort>> port) {
    return _gp_port_new(port);
  }

  late final _gp_port_newPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Pointer<GPPort>>)>
      >('gp_port_new');
  late final _gp_port_new = _gp_port_newPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<GPPort>>)>();

  int gp_port_free(ffi.Pointer<GPPort> port) {
    return _gp_port_free(port);
  }

  late final _gp_port_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPort>)>>(
        'gp_port_free',
      );
  late final _gp_port_free = _gp_port_freePtr
      .asFunction<int Function(ffi.Pointer<GPPort>)>();

  int gp_port_set_info(ffi.Pointer<GPPort> port, GPPortInfo info) {
    return _gp_port_set_info(port, info);
  }

  late final _gp_port_set_infoPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPort>, GPPortInfo)>
      >('gp_port_set_info');
  late final _gp_port_set_info = _gp_port_set_infoPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, GPPortInfo)>();

  int gp_port_get_info(ffi.Pointer<GPPort> port, ffi.Pointer<GPPortInfo> info) {
    return _gp_port_get_info(port, info);
  }

  late final _gp_port_get_infoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Pointer<GPPortInfo>)
        >
      >('gp_port_get_info');
  late final _gp_port_get_info = _gp_port_get_infoPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, ffi.Pointer<GPPortInfo>)>();

  int gp_port_open(ffi.Pointer<GPPort> port) {
    return _gp_port_open(port);
  }

  late final _gp_port_openPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPort>)>>(
        'gp_port_open',
      );
  late final _gp_port_open = _gp_port_openPtr
      .asFunction<int Function(ffi.Pointer<GPPort>)>();

  int gp_port_close(ffi.Pointer<GPPort> port) {
    return _gp_port_close(port);
  }

  late final _gp_port_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPort>)>>(
        'gp_port_close',
      );
  late final _gp_port_close = _gp_port_closePtr
      .asFunction<int Function(ffi.Pointer<GPPort>)>();

  int gp_port_reset(ffi.Pointer<GPPort> port) {
    return _gp_port_reset(port);
  }

  late final _gp_port_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPort>)>>(
        'gp_port_reset',
      );
  late final _gp_port_reset = _gp_port_resetPtr
      .asFunction<int Function(ffi.Pointer<GPPort>)>();

  int gp_port_write(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Char> data,
    int size,
  ) {
    return _gp_port_write(port, data, size);
  }

  late final _gp_port_writePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Char>, ffi.Int)
        >
      >('gp_port_write');
  late final _gp_port_write = _gp_port_writePtr
      .asFunction<
        int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Char>, int)
      >();

  int gp_port_read(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Char> data,
    int size,
  ) {
    return _gp_port_read(port, data, size);
  }

  late final _gp_port_readPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Char>, ffi.Int)
        >
      >('gp_port_read');
  late final _gp_port_read = _gp_port_readPtr
      .asFunction<
        int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Char>, int)
      >();

  int gp_port_check_int(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Char> data,
    int size,
  ) {
    return _gp_port_check_int(port, data, size);
  }

  late final _gp_port_check_intPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Char>, ffi.Int)
        >
      >('gp_port_check_int');
  late final _gp_port_check_int = _gp_port_check_intPtr
      .asFunction<
        int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Char>, int)
      >();

  int gp_port_check_int_fast(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Char> data,
    int size,
  ) {
    return _gp_port_check_int_fast(port, data, size);
  }

  late final _gp_port_check_int_fastPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Char>, ffi.Int)
        >
      >('gp_port_check_int_fast');
  late final _gp_port_check_int_fast = _gp_port_check_int_fastPtr
      .asFunction<
        int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Char>, int)
      >();

  int gp_port_get_timeout(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Int> timeout,
  ) {
    return _gp_port_get_timeout(port, timeout);
  }

  late final _gp_port_get_timeoutPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Int>)
        >
      >('gp_port_get_timeout');
  late final _gp_port_get_timeout = _gp_port_get_timeoutPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Int>)>();

  int gp_port_set_timeout(ffi.Pointer<GPPort> port, int timeout) {
    return _gp_port_set_timeout(port, timeout);
  }

  late final _gp_port_set_timeoutPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPort>, ffi.Int)>
      >('gp_port_set_timeout');
  late final _gp_port_set_timeout = _gp_port_set_timeoutPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, int)>();

  int gp_port_set_settings(ffi.Pointer<GPPort> port, GPPortSettings settings) {
    return _gp_port_set_settings(port, settings);
  }

  late final _gp_port_set_settingsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, GPPortSettings)
        >
      >('gp_port_set_settings');
  late final _gp_port_set_settings = _gp_port_set_settingsPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, GPPortSettings)>();

  int gp_port_get_settings(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<GPPortSettings> settings,
  ) {
    return _gp_port_get_settings(port, settings);
  }

  late final _gp_port_get_settingsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Pointer<GPPortSettings>)
        >
      >('gp_port_get_settings');
  late final _gp_port_get_settings = _gp_port_get_settingsPtr
      .asFunction<
        int Function(ffi.Pointer<GPPort>, ffi.Pointer<GPPortSettings>)
      >();

  int gp_port_get_pin(
    ffi.Pointer<GPPort> port,
    _GPPin pin,
    ffi.Pointer<ffi.UnsignedInt> level,
  ) {
    return _gp_port_get_pin(port, pin.value, level);
  }

  late final _gp_port_get_pinPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<GPPort>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.UnsignedInt>,
          )
        >
      >('gp_port_get_pin');
  late final _gp_port_get_pin = _gp_port_get_pinPtr
      .asFunction<
        int Function(ffi.Pointer<GPPort>, int, ffi.Pointer<ffi.UnsignedInt>)
      >();

  int gp_port_set_pin(ffi.Pointer<GPPort> port, _GPPin pin, _GPLevel level) {
    return _gp_port_set_pin(port, pin.value, level.value);
  }

  late final _gp_port_set_pinPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<GPPort>,
            ffi.UnsignedInt,
            ffi.UnsignedInt,
          )
        >
      >('gp_port_set_pin');
  late final _gp_port_set_pin = _gp_port_set_pinPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, int, int)>();

  int gp_port_send_break(ffi.Pointer<GPPort> port, int duration) {
    return _gp_port_send_break(port, duration);
  }

  late final _gp_port_send_breakPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPort>, ffi.Int)>
      >('gp_port_send_break');
  late final _gp_port_send_break = _gp_port_send_breakPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, int)>();

  int gp_port_flush(ffi.Pointer<GPPort> port, int direction) {
    return _gp_port_flush(port, direction);
  }

  late final _gp_port_flushPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPort>, ffi.Int)>
      >('gp_port_flush');
  late final _gp_port_flush = _gp_port_flushPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, int)>();

  /// \brief Allow using file descriptor of USB device without auto-discovery
  ///
  /// This is required for access of USB on android since applications don't have direct
  /// access to USB device
  ///
  /// It must be called prior to library initialization
  int gp_port_usb_set_sys_device(int fd) {
    return _gp_port_usb_set_sys_device(fd);
  }

  late final _gp_port_usb_set_sys_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
        'gp_port_usb_set_sys_device',
      );
  late final _gp_port_usb_set_sys_device = _gp_port_usb_set_sys_devicePtr
      .asFunction<int Function(int)>();

  /// \brief Get externally set file descriptor of USB device, return -1 if not set
  int gp_port_usb_get_sys_device() {
    return _gp_port_usb_get_sys_device();
  }

  late final _gp_port_usb_get_sys_devicePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
        'gp_port_usb_get_sys_device',
      );
  late final _gp_port_usb_get_sys_device = _gp_port_usb_get_sys_devicePtr
      .asFunction<int Function()>();

  int gp_port_usb_find_device(
    ffi.Pointer<GPPort> port,
    int idvendor,
    int idproduct,
  ) {
    return _gp_port_usb_find_device(port, idvendor, idproduct);
  }

  late final _gp_port_usb_find_devicePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Int, ffi.Int)
        >
      >('gp_port_usb_find_device');
  late final _gp_port_usb_find_device = _gp_port_usb_find_devicePtr
      .asFunction<int Function(ffi.Pointer<GPPort>, int, int)>();

  int gp_port_usb_find_device_by_class(
    ffi.Pointer<GPPort> port,
    int mainclass,
    int subclass,
    int protocol,
  ) {
    return _gp_port_usb_find_device_by_class(
      port,
      mainclass,
      subclass,
      protocol,
    );
  }

  late final _gp_port_usb_find_device_by_classPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Int, ffi.Int, ffi.Int)
        >
      >('gp_port_usb_find_device_by_class');
  late final _gp_port_usb_find_device_by_class =
      _gp_port_usb_find_device_by_classPtr
          .asFunction<int Function(ffi.Pointer<GPPort>, int, int, int)>();

  int gp_port_usb_clear_halt(ffi.Pointer<GPPort> port, int ep) {
    return _gp_port_usb_clear_halt(port, ep);
  }

  late final _gp_port_usb_clear_haltPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<GPPort>, ffi.Int)>
      >('gp_port_usb_clear_halt');
  late final _gp_port_usb_clear_halt = _gp_port_usb_clear_haltPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, int)>();

  int gp_port_usb_msg_write(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Char> bytes,
    int size,
  ) {
    return _gp_port_usb_msg_write(port, request, value, index, bytes, size);
  }

  late final _gp_port_usb_msg_writePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<GPPort>,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('gp_port_usb_msg_write');
  late final _gp_port_usb_msg_write = _gp_port_usb_msg_writePtr
      .asFunction<
        int Function(
          ffi.Pointer<GPPort>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  int gp_port_usb_msg_read(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Char> bytes,
    int size,
  ) {
    return _gp_port_usb_msg_read(port, request, value, index, bytes, size);
  }

  late final _gp_port_usb_msg_readPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<GPPort>,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('gp_port_usb_msg_read');
  late final _gp_port_usb_msg_read = _gp_port_usb_msg_readPtr
      .asFunction<
        int Function(
          ffi.Pointer<GPPort>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  int gp_port_usb_msg_interface_write(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Char> bytes,
    int size,
  ) {
    return _gp_port_usb_msg_interface_write(
      port,
      request,
      value,
      index,
      bytes,
      size,
    );
  }

  late final _gp_port_usb_msg_interface_writePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<GPPort>,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('gp_port_usb_msg_interface_write');
  late final _gp_port_usb_msg_interface_write =
      _gp_port_usb_msg_interface_writePtr
          .asFunction<
            int Function(
              ffi.Pointer<GPPort>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  int gp_port_usb_msg_interface_read(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Char> bytes,
    int size,
  ) {
    return _gp_port_usb_msg_interface_read(
      port,
      request,
      value,
      index,
      bytes,
      size,
    );
  }

  late final _gp_port_usb_msg_interface_readPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<GPPort>,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('gp_port_usb_msg_interface_read');
  late final _gp_port_usb_msg_interface_read =
      _gp_port_usb_msg_interface_readPtr
          .asFunction<
            int Function(
              ffi.Pointer<GPPort>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              int,
            )
          >();

  int gp_port_usb_msg_class_write(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Char> bytes,
    int size,
  ) {
    return _gp_port_usb_msg_class_write(
      port,
      request,
      value,
      index,
      bytes,
      size,
    );
  }

  late final _gp_port_usb_msg_class_writePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<GPPort>,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('gp_port_usb_msg_class_write');
  late final _gp_port_usb_msg_class_write = _gp_port_usb_msg_class_writePtr
      .asFunction<
        int Function(
          ffi.Pointer<GPPort>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  int gp_port_usb_msg_class_read(
    ffi.Pointer<GPPort> port,
    int request,
    int value,
    int index,
    ffi.Pointer<ffi.Char> bytes,
    int size,
  ) {
    return _gp_port_usb_msg_class_read(
      port,
      request,
      value,
      index,
      bytes,
      size,
    );
  }

  late final _gp_port_usb_msg_class_readPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<GPPort>,
            ffi.Int,
            ffi.Int,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('gp_port_usb_msg_class_read');
  late final _gp_port_usb_msg_class_read = _gp_port_usb_msg_class_readPtr
      .asFunction<
        int Function(
          ffi.Pointer<GPPort>,
          int,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  int gp_port_seek(ffi.Pointer<GPPort> port, int offset, int whence) {
    return _gp_port_seek(port, offset, whence);
  }

  late final _gp_port_seekPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Int, ffi.Int)
        >
      >('gp_port_seek');
  late final _gp_port_seek = _gp_port_seekPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, int, int)>();

  int gp_port_send_scsi_cmd(
    ffi.Pointer<GPPort> port,
    int to_dev,
    ffi.Pointer<ffi.Char> cmd,
    int cmd_size,
    ffi.Pointer<ffi.Char> sense,
    int sense_size,
    ffi.Pointer<ffi.Char> data,
    int data_size,
  ) {
    return _gp_port_send_scsi_cmd(
      port,
      to_dev,
      cmd,
      cmd_size,
      sense,
      sense_size,
      data,
      data_size,
    );
  }

  late final _gp_port_send_scsi_cmdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<GPPort>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('gp_port_send_scsi_cmd');
  late final _gp_port_send_scsi_cmd = _gp_port_send_scsi_cmdPtr
      .asFunction<
        int Function(
          ffi.Pointer<GPPort>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
        )
      >();

  int gp_port_set_error(
    ffi.Pointer<GPPort> port,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gp_port_set_error(port, format);
  }

  late final _gp_port_set_errorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Char>)
        >
      >('gp_port_set_error');
  late final _gp_port_set_error = _gp_port_set_errorPtr
      .asFunction<int Function(ffi.Pointer<GPPort>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> gp_port_get_error(ffi.Pointer<GPPort> port) {
    return _gp_port_get_error(port);
  }

  late final _gp_port_get_errorPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GPPort>)>
      >('gp_port_get_error');
  late final _gp_port_get_error = _gp_port_get_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<GPPort>)>();

  int gp_log_add_func(
    GPLogLevel level,
    GPLogFunc func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gp_log_add_func(level.value, func, data);
  }

  late final _gp_log_add_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedInt, GPLogFunc, ffi.Pointer<ffi.Void>)
        >
      >('gp_log_add_func');
  late final _gp_log_add_func = _gp_log_add_funcPtr
      .asFunction<int Function(int, GPLogFunc, ffi.Pointer<ffi.Void>)>();

  int gp_log_remove_func(int id) {
    return _gp_log_remove_func(id);
  }

  late final _gp_log_remove_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
        'gp_log_remove_func',
      );
  late final _gp_log_remove_func = _gp_log_remove_funcPtr
      .asFunction<int Function(int)>();

  void gp_log(
    GPLogLevel level,
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gp_log(level.value, domain, format);
  }

  late final _gp_logPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_log');
  late final _gp_log = _gp_logPtr
      .asFunction<
        void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)
      >();

  void gp_log_with_source_location(
    GPLogLevel level,
    ffi.Pointer<ffi.Char> file,
    int line,
    ffi.Pointer<ffi.Char> func,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gp_log_with_source_location(level.value, file, line, func, format);
  }

  late final _gp_log_with_source_locationPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_log_with_source_location');
  late final _gp_log_with_source_location = _gp_log_with_source_locationPtr
      .asFunction<
        void Function(
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  void gp_logv(
    GPLogLevel level,
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> format,
    ffi.Pointer<__va_list_tag> args,
  ) {
    return _gp_logv(level.value, domain, format, args);
  }

  late final _gp_logvPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<__va_list_tag>,
          )
        >
      >('gp_logv');
  late final _gp_logv = _gp_logvPtr
      .asFunction<
        void Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>,
        )
      >();

  void gp_log_data(
    ffi.Pointer<ffi.Char> domain,
    ffi.Pointer<ffi.Char> data,
    int size,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gp_log_data(domain, data, size, format);
  }

  late final _gp_log_dataPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_log_data');
  late final _gp_log_data = _gp_log_dataPtr
      .asFunction<
        void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
        )
      >();

  ffi.Pointer<ffi.Char> gp_port_result_as_string(int result) {
    return _gp_port_result_as_string(result);
  }

  late final _gp_port_result_as_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
        'gp_port_result_as_string',
      );
  late final _gp_port_result_as_string = _gp_port_result_as_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr = _lookup<ffi.NativeFunction<clock_t Function()>>(
    'clock',
  );
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(ffi.Pointer<time_t> __timer) {
    return _time(__timer);
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(int __time1, int __time0) {
    return _difftime(__time1, __time0);
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
        'difftime',
      );
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(ffi.Pointer<tm> __tp) {
    return _mktime(__tp);
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(__s, __maxsize, __format, __tp);
  }

  late final _strftimePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<tm>,
          )
        >
      >('strftime');
  late final _strftime = _strftimePtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>,
        )
      >();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(__s, __maxsize, __format, __tp, __loc);
  }

  late final _strftime_lPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Size Function(
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<tm>,
            locale_t,
          )
        >
      >('strftime_l');
  late final _strftime_l = _strftime_lPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>,
          locale_t,
        )
      >();

  ffi.Pointer<tm> gmtime(ffi.Pointer<time_t> __timer) {
    return _gmtime(__timer);
  }

  late final _gmtimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>
      >('gmtime');
  late final _gmtime = _gmtimePtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(ffi.Pointer<time_t> __timer) {
    return _localtime(__timer);
  }

  late final _localtimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>
      >('localtime');
  late final _localtime = _localtimePtr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> gmtime_r(ffi.Pointer<time_t> __timer, ffi.Pointer<tm> __tp) {
    return _gmtime_r(__timer, __tp);
  }

  late final _gmtime_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)
        >
      >('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr
      .asFunction<
        ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)
      >();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(__timer, __tp);
  }

  late final _localtime_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)
        >
      >('localtime_r');
  late final _localtime_r = _localtime_rPtr
      .asFunction<
        ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)
      >();

  ffi.Pointer<ffi.Char> asctime(ffi.Pointer<tm> __tp) {
    return _asctime(__tp);
  }

  late final _asctimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>
      >('asctime');
  late final _asctime = _asctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> ctime(ffi.Pointer<time_t> __timer) {
    return _ctime(__timer);
  }

  late final _ctimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>
      >('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(__tp, __buf);
  }

  late final _asctime_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)
        >
      >('asctime_r');
  late final _asctime_r = _asctime_rPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)
      >();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(__timer, __buf);
  }

  late final _ctime_rPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
            ffi.Pointer<time_t>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('ctime_r');
  late final _ctime_r = _ctime_rPtr
      .asFunction<
        ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> ___tzname =
      _lookup<ffi.Pointer<ffi.Char>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __tzname => ___tzname;

  late final ffi.Pointer<ffi.Int> ___daylight = _lookup<ffi.Int>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Long> ___timezone = _lookup<ffi.Long>(
    '__timezone',
  );

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _tzname =
      _lookup<ffi.Pointer<ffi.Char>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>(
    'tzset',
  );
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(ffi.Pointer<tm> __tp) {
    return _timegm(__tp);
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timelocal(ffi.Pointer<tm> __tp) {
    return _timelocal(__tp);
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
        'timelocal',
      );
  late final _timelocal = _timelocalPtr
      .asFunction<int Function(ffi.Pointer<tm>)>();

  int dysize(int __year) {
    return _dysize(__year);
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(__requested_time, __remaining);
  }

  late final _nanosleepPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)
        >
      >('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(int __clock_id, ffi.Pointer<timespec> __res) {
    return _clock_getres(__clock_id, __res);
  }

  late final _clock_getresPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>
      >('clock_getres');
  late final _clock_getres = _clock_getresPtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(int __clock_id, ffi.Pointer<timespec> __tp) {
    return _clock_gettime(__clock_id, __tp);
  }

  late final _clock_gettimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>
      >('clock_gettime');
  late final _clock_gettime = _clock_gettimePtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_settime(int __clock_id, ffi.Pointer<timespec> __tp) {
    return _clock_settime(__clock_id, __tp);
  }

  late final _clock_settimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>
      >('clock_settime');
  late final _clock_settime = _clock_settimePtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(__clock_id, __flags, __req, __rem);
  }

  late final _clock_nanosleepPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            clockid_t,
            ffi.Int,
            ffi.Pointer<timespec>,
            ffi.Pointer<timespec>,
          )
        >
      >('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr
      .asFunction<
        int Function(int, int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)
      >();

  int clock_getcpuclockid(int __pid, ffi.Pointer<clockid_t> __clock_id) {
    return _clock_getcpuclockid(__pid, __clock_id);
  }

  late final _clock_getcpuclockidPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>
      >('clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(__clock_id, __evp, __timerid);
  }

  late final _timer_createPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            clockid_t,
            ffi.Pointer<sigevent>,
            ffi.Pointer<timer_t>,
          )
        >
      >('timer_create');
  late final _timer_create = _timer_createPtr
      .asFunction<
        int Function(int, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)
      >();

  int timer_delete(timer_t __timerid) {
    return _timer_delete(__timerid);
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete = _timer_deletePtr
      .asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(__timerid, __flags, __value, __ovalue);
  }

  late final _timer_settimePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            timer_t,
            ffi.Int,
            ffi.Pointer<itimerspec>,
            ffi.Pointer<itimerspec>,
          )
        >
      >('timer_settime');
  late final _timer_settime = _timer_settimePtr
      .asFunction<
        int Function(
          timer_t,
          int,
          ffi.Pointer<itimerspec>,
          ffi.Pointer<itimerspec>,
        )
      >();

  int timer_gettime(timer_t __timerid, ffi.Pointer<itimerspec> __value) {
    return _timer_gettime(__timerid, __value);
  }

  late final _timer_gettimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>
      >('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<itimerspec>)>();

  int timer_getoverrun(timer_t __timerid) {
    return _timer_getoverrun(__timerid);
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
        'timer_getoverrun',
      );
  late final _timer_getoverrun = _timer_getoverrunPtr
      .asFunction<int Function(timer_t)>();

  int timespec_get(ffi.Pointer<timespec> __ts, int __base) {
    return _timespec_get(__ts, __base);
  }

  late final _timespec_getPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>
      >('timespec_get');
  late final _timespec_get = _timespec_getPtr
      .asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int gp_file_new(ffi.Pointer<ffi.Pointer<CameraFile>> file) {
    return _gp_file_new(file);
  }

  late final _gp_file_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<CameraFile>>)
        >
      >('gp_file_new');
  late final _gp_file_new = _gp_file_newPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<CameraFile>>)>();

  int gp_file_new_from_fd(ffi.Pointer<ffi.Pointer<CameraFile>> file, int fd) {
    return _gp_file_new_from_fd(file, fd);
  }

  late final _gp_file_new_from_fdPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<CameraFile>>, ffi.Int)
        >
      >('gp_file_new_from_fd');
  late final _gp_file_new_from_fd = _gp_file_new_from_fdPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<CameraFile>>, int)>();

  int gp_file_new_from_handler(
    ffi.Pointer<ffi.Pointer<CameraFile>> file,
    ffi.Pointer<CameraFileHandler> handler,
    ffi.Pointer<ffi.Void> priv,
  ) {
    return _gp_file_new_from_handler(file, handler, priv);
  }

  late final _gp_file_new_from_handlerPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Pointer<CameraFile>>,
            ffi.Pointer<CameraFileHandler>,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('gp_file_new_from_handler');
  late final _gp_file_new_from_handler = _gp_file_new_from_handlerPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Pointer<CameraFile>>,
          ffi.Pointer<CameraFileHandler>,
          ffi.Pointer<ffi.Void>,
        )
      >();

  int gp_file_ref(ffi.Pointer<CameraFile> file) {
    return _gp_file_ref(file);
  }

  late final _gp_file_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraFile>)>>(
        'gp_file_ref',
      );
  late final _gp_file_ref = _gp_file_refPtr
      .asFunction<int Function(ffi.Pointer<CameraFile>)>();

  int gp_file_unref(ffi.Pointer<CameraFile> file) {
    return _gp_file_unref(file);
  }

  late final _gp_file_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraFile>)>>(
        'gp_file_unref',
      );
  late final _gp_file_unref = _gp_file_unrefPtr
      .asFunction<int Function(ffi.Pointer<CameraFile>)>();

  int gp_file_free(ffi.Pointer<CameraFile> file) {
    return _gp_file_free(file);
  }

  late final _gp_file_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraFile>)>>(
        'gp_file_free',
      );
  late final _gp_file_free = _gp_file_freePtr
      .asFunction<int Function(ffi.Pointer<CameraFile>)>();

  int gp_file_set_name(
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gp_file_set_name(file, name);
  }

  late final _gp_file_set_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraFile>, ffi.Pointer<ffi.Char>)
        >
      >('gp_file_set_name');
  late final _gp_file_set_name = _gp_file_set_namePtr
      .asFunction<
        int Function(ffi.Pointer<CameraFile>, ffi.Pointer<ffi.Char>)
      >();

  int gp_file_get_name(
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
  ) {
    return _gp_file_get_name(file, name);
  }

  late final _gp_file_get_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFile>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('gp_file_get_name');
  late final _gp_file_get_name = _gp_file_get_namePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFile>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int gp_file_set_mime_type(
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<ffi.Char> mime_type,
  ) {
    return _gp_file_set_mime_type(file, mime_type);
  }

  late final _gp_file_set_mime_typePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraFile>, ffi.Pointer<ffi.Char>)
        >
      >('gp_file_set_mime_type');
  late final _gp_file_set_mime_type = _gp_file_set_mime_typePtr
      .asFunction<
        int Function(ffi.Pointer<CameraFile>, ffi.Pointer<ffi.Char>)
      >();

  int gp_file_get_mime_type(
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<ffi.Pointer<ffi.Char>> mime_type,
  ) {
    return _gp_file_get_mime_type(file, mime_type);
  }

  late final _gp_file_get_mime_typePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFile>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('gp_file_get_mime_type');
  late final _gp_file_get_mime_type = _gp_file_get_mime_typePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFile>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int gp_file_set_mtime(ffi.Pointer<CameraFile> file, int mtime) {
    return _gp_file_set_mtime(file, mtime);
  }

  late final _gp_file_set_mtimePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraFile>, time_t)>
      >('gp_file_set_mtime');
  late final _gp_file_set_mtime = _gp_file_set_mtimePtr
      .asFunction<int Function(ffi.Pointer<CameraFile>, int)>();

  int gp_file_get_mtime(
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<time_t> mtime,
  ) {
    return _gp_file_get_mtime(file, mtime);
  }

  late final _gp_file_get_mtimePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraFile>, ffi.Pointer<time_t>)
        >
      >('gp_file_get_mtime');
  late final _gp_file_get_mtime = _gp_file_get_mtimePtr
      .asFunction<int Function(ffi.Pointer<CameraFile>, ffi.Pointer<time_t>)>();

  int gp_file_detect_mime_type(ffi.Pointer<CameraFile> file) {
    return _gp_file_detect_mime_type(file);
  }

  late final _gp_file_detect_mime_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraFile>)>>(
        'gp_file_detect_mime_type',
      );
  late final _gp_file_detect_mime_type = _gp_file_detect_mime_typePtr
      .asFunction<int Function(ffi.Pointer<CameraFile>)>();

  int gp_file_adjust_name_for_mime_type(ffi.Pointer<CameraFile> file) {
    return _gp_file_adjust_name_for_mime_type(file);
  }

  late final _gp_file_adjust_name_for_mime_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraFile>)>>(
        'gp_file_adjust_name_for_mime_type',
      );
  late final _gp_file_adjust_name_for_mime_type =
      _gp_file_adjust_name_for_mime_typePtr
          .asFunction<int Function(ffi.Pointer<CameraFile>)>();

  int gp_file_get_name_by_type(
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<ffi.Char> basename,
    CameraFileType type,
    ffi.Pointer<ffi.Pointer<ffi.Char>> newname,
  ) {
    return _gp_file_get_name_by_type(file, basename, type.value, newname);
  }

  late final _gp_file_get_name_by_typePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFile>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('gp_file_get_name_by_type');
  late final _gp_file_get_name_by_type = _gp_file_get_name_by_typePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFile>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int gp_file_set_data_and_size(
    ffi.Pointer<CameraFile> arg0,
    ffi.Pointer<ffi.Char> data,
    int size,
  ) {
    return _gp_file_set_data_and_size(arg0, data, size);
  }

  late final _gp_file_set_data_and_sizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFile>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedLong,
          )
        >
      >('gp_file_set_data_and_size');
  late final _gp_file_set_data_and_size = _gp_file_set_data_and_sizePtr
      .asFunction<
        int Function(ffi.Pointer<CameraFile>, ffi.Pointer<ffi.Char>, int)
      >();

  int gp_file_get_data_and_size(
    ffi.Pointer<CameraFile> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> data,
    ffi.Pointer<ffi.UnsignedLong> size,
  ) {
    return _gp_file_get_data_and_size(arg0, data, size);
  }

  late final _gp_file_get_data_and_sizePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFile>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.UnsignedLong>,
          )
        >
      >('gp_file_get_data_and_size');
  late final _gp_file_get_data_and_size = _gp_file_get_data_and_sizePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFile>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.UnsignedLong>,
        )
      >();

  int gp_file_open(
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _gp_file_open(file, filename);
  }

  late final _gp_file_openPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraFile>, ffi.Pointer<ffi.Char>)
        >
      >('gp_file_open');
  late final _gp_file_open = _gp_file_openPtr
      .asFunction<
        int Function(ffi.Pointer<CameraFile>, ffi.Pointer<ffi.Char>)
      >();

  int gp_file_save(
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<ffi.Char> filename,
  ) {
    return _gp_file_save(file, filename);
  }

  late final _gp_file_savePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraFile>, ffi.Pointer<ffi.Char>)
        >
      >('gp_file_save');
  late final _gp_file_save = _gp_file_savePtr
      .asFunction<
        int Function(ffi.Pointer<CameraFile>, ffi.Pointer<ffi.Char>)
      >();

  int gp_file_clean(ffi.Pointer<CameraFile> file) {
    return _gp_file_clean(file);
  }

  late final _gp_file_cleanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraFile>)>>(
        'gp_file_clean',
      );
  late final _gp_file_clean = _gp_file_cleanPtr
      .asFunction<int Function(ffi.Pointer<CameraFile>)>();

  int gp_file_copy(
    ffi.Pointer<CameraFile> destination,
    ffi.Pointer<CameraFile> source,
  ) {
    return _gp_file_copy(destination, source);
  }

  late final _gp_file_copyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraFile>, ffi.Pointer<CameraFile>)
        >
      >('gp_file_copy');
  late final _gp_file_copy = _gp_file_copyPtr
      .asFunction<
        int Function(ffi.Pointer<CameraFile>, ffi.Pointer<CameraFile>)
      >();

  int gp_file_append(
    ffi.Pointer<CameraFile> arg0,
    ffi.Pointer<ffi.Char> data,
    int size,
  ) {
    return _gp_file_append(arg0, data, size);
  }

  late final _gp_file_appendPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFile>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedLong,
          )
        >
      >('gp_file_append');
  late final _gp_file_append = _gp_file_appendPtr
      .asFunction<
        int Function(ffi.Pointer<CameraFile>, ffi.Pointer<ffi.Char>, int)
      >();

  int gp_file_slurp(
    ffi.Pointer<CameraFile> arg0,
    ffi.Pointer<ffi.Char> data,
    int size,
    ffi.Pointer<ffi.Size> readlen,
  ) {
    return _gp_file_slurp(arg0, data, size, readlen);
  }

  late final _gp_file_slurpPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFile>,
            ffi.Pointer<ffi.Char>,
            ffi.Size,
            ffi.Pointer<ffi.Size>,
          )
        >
      >('gp_file_slurp');
  late final _gp_file_slurp = _gp_file_slurpPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFile>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Size>,
        )
      >();

  ffi.Pointer<GPContext> gp_context_new() {
    return _gp_context_new();
  }

  late final _gp_context_newPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<GPContext> Function()>>(
        'gp_context_new',
      );
  late final _gp_context_new = _gp_context_newPtr
      .asFunction<ffi.Pointer<GPContext> Function()>();

  void gp_context_ref(ffi.Pointer<GPContext> context) {
    return _gp_context_ref(context);
  }

  late final _gp_context_refPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPContext>)>>(
        'gp_context_ref',
      );
  late final _gp_context_ref = _gp_context_refPtr
      .asFunction<void Function(ffi.Pointer<GPContext>)>();

  void gp_context_unref(ffi.Pointer<GPContext> context) {
    return _gp_context_unref(context);
  }

  late final _gp_context_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPContext>)>>(
        'gp_context_unref',
      );
  late final _gp_context_unref = _gp_context_unrefPtr
      .asFunction<void Function(ffi.Pointer<GPContext>)>();

  void gp_context_set_idle_func(
    ffi.Pointer<GPContext> context,
    GPContextIdleFunc func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gp_context_set_idle_func(context, func, data);
  }

  late final _gp_context_set_idle_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<GPContext>,
            GPContextIdleFunc,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('gp_context_set_idle_func');
  late final _gp_context_set_idle_func = _gp_context_set_idle_funcPtr
      .asFunction<
        void Function(
          ffi.Pointer<GPContext>,
          GPContextIdleFunc,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void gp_context_set_progress_funcs(
    ffi.Pointer<GPContext> context,
    GPContextProgressStartFunc start_func,
    GPContextProgressUpdateFunc update_func,
    GPContextProgressStopFunc stop_func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gp_context_set_progress_funcs(
      context,
      start_func,
      update_func,
      stop_func,
      data,
    );
  }

  late final _gp_context_set_progress_funcsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<GPContext>,
            GPContextProgressStartFunc,
            GPContextProgressUpdateFunc,
            GPContextProgressStopFunc,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('gp_context_set_progress_funcs');
  late final _gp_context_set_progress_funcs = _gp_context_set_progress_funcsPtr
      .asFunction<
        void Function(
          ffi.Pointer<GPContext>,
          GPContextProgressStartFunc,
          GPContextProgressUpdateFunc,
          GPContextProgressStopFunc,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void gp_context_set_error_func(
    ffi.Pointer<GPContext> context,
    GPContextErrorFunc func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gp_context_set_error_func(context, func, data);
  }

  late final _gp_context_set_error_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<GPContext>,
            GPContextErrorFunc,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('gp_context_set_error_func');
  late final _gp_context_set_error_func = _gp_context_set_error_funcPtr
      .asFunction<
        void Function(
          ffi.Pointer<GPContext>,
          GPContextErrorFunc,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void gp_context_set_status_func(
    ffi.Pointer<GPContext> context,
    GPContextStatusFunc func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gp_context_set_status_func(context, func, data);
  }

  late final _gp_context_set_status_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<GPContext>,
            GPContextStatusFunc,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('gp_context_set_status_func');
  late final _gp_context_set_status_func = _gp_context_set_status_funcPtr
      .asFunction<
        void Function(
          ffi.Pointer<GPContext>,
          GPContextStatusFunc,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void gp_context_set_question_func(
    ffi.Pointer<GPContext> context,
    GPContextQuestionFunc func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gp_context_set_question_func(context, func, data);
  }

  late final _gp_context_set_question_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<GPContext>,
            GPContextQuestionFunc,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('gp_context_set_question_func');
  late final _gp_context_set_question_func = _gp_context_set_question_funcPtr
      .asFunction<
        void Function(
          ffi.Pointer<GPContext>,
          GPContextQuestionFunc,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void gp_context_set_cancel_func(
    ffi.Pointer<GPContext> context,
    GPContextCancelFunc func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gp_context_set_cancel_func(context, func, data);
  }

  late final _gp_context_set_cancel_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<GPContext>,
            GPContextCancelFunc,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('gp_context_set_cancel_func');
  late final _gp_context_set_cancel_func = _gp_context_set_cancel_funcPtr
      .asFunction<
        void Function(
          ffi.Pointer<GPContext>,
          GPContextCancelFunc,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void gp_context_set_message_func(
    ffi.Pointer<GPContext> context,
    GPContextMessageFunc func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gp_context_set_message_func(context, func, data);
  }

  late final _gp_context_set_message_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<GPContext>,
            GPContextMessageFunc,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('gp_context_set_message_func');
  late final _gp_context_set_message_func = _gp_context_set_message_funcPtr
      .asFunction<
        void Function(
          ffi.Pointer<GPContext>,
          GPContextMessageFunc,
          ffi.Pointer<ffi.Void>,
        )
      >();

  void gp_context_idle(ffi.Pointer<GPContext> context) {
    return _gp_context_idle(context);
  }

  late final _gp_context_idlePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GPContext>)>>(
        'gp_context_idle',
      );
  late final _gp_context_idle = _gp_context_idlePtr
      .asFunction<void Function(ffi.Pointer<GPContext>)>();

  void gp_context_error(
    ffi.Pointer<GPContext> context,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gp_context_error(context, format);
  }

  late final _gp_context_errorPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPContext>, ffi.Pointer<ffi.Char>)
        >
      >('gp_context_error');
  late final _gp_context_error = _gp_context_errorPtr
      .asFunction<
        void Function(ffi.Pointer<GPContext>, ffi.Pointer<ffi.Char>)
      >();

  void gp_context_status(
    ffi.Pointer<GPContext> context,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gp_context_status(context, format);
  }

  late final _gp_context_statusPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPContext>, ffi.Pointer<ffi.Char>)
        >
      >('gp_context_status');
  late final _gp_context_status = _gp_context_statusPtr
      .asFunction<
        void Function(ffi.Pointer<GPContext>, ffi.Pointer<ffi.Char>)
      >();

  void gp_context_message(
    ffi.Pointer<GPContext> context,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gp_context_message(context, format);
  }

  late final _gp_context_messagePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPContext>, ffi.Pointer<ffi.Char>)
        >
      >('gp_context_message');
  late final _gp_context_message = _gp_context_messagePtr
      .asFunction<
        void Function(ffi.Pointer<GPContext>, ffi.Pointer<ffi.Char>)
      >();

  _GPContextFeedback gp_context_question(
    ffi.Pointer<GPContext> context,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _GPContextFeedback.fromValue(_gp_context_question(context, format));
  }

  late final _gp_context_questionPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedInt Function(
            ffi.Pointer<GPContext>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_context_question');
  late final _gp_context_question = _gp_context_questionPtr
      .asFunction<
        int Function(ffi.Pointer<GPContext>, ffi.Pointer<ffi.Char>)
      >();

  _GPContextFeedback gp_context_cancel(ffi.Pointer<GPContext> context) {
    return _GPContextFeedback.fromValue(_gp_context_cancel(context));
  }

  late final _gp_context_cancelPtr =
      _lookup<
        ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<GPContext>)>
      >('gp_context_cancel');
  late final _gp_context_cancel = _gp_context_cancelPtr
      .asFunction<int Function(ffi.Pointer<GPContext>)>();

  int gp_context_progress_start(
    ffi.Pointer<GPContext> context,
    double target,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _gp_context_progress_start(context, target, format);
  }

  late final _gp_context_progress_startPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.UnsignedInt Function(
            ffi.Pointer<GPContext>,
            ffi.Float,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_context_progress_start');
  late final _gp_context_progress_start = _gp_context_progress_startPtr
      .asFunction<
        int Function(ffi.Pointer<GPContext>, double, ffi.Pointer<ffi.Char>)
      >();

  void gp_context_progress_update(
    ffi.Pointer<GPContext> context,
    int id,
    double current,
  ) {
    return _gp_context_progress_update(context, id, current);
  }

  late final _gp_context_progress_updatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPContext>, ffi.UnsignedInt, ffi.Float)
        >
      >('gp_context_progress_update');
  late final _gp_context_progress_update = _gp_context_progress_updatePtr
      .asFunction<void Function(ffi.Pointer<GPContext>, int, double)>();

  void gp_context_progress_stop(ffi.Pointer<GPContext> context, int id) {
    return _gp_context_progress_stop(context, id);
  }

  late final _gp_context_progress_stopPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<GPContext>, ffi.UnsignedInt)
        >
      >('gp_context_progress_stop');
  late final _gp_context_progress_stop = _gp_context_progress_stopPtr
      .asFunction<void Function(ffi.Pointer<GPContext>, int)>();

  int gp_list_new(ffi.Pointer<ffi.Pointer<CameraList>> list) {
    return _gp_list_new(list);
  }

  late final _gp_list_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<CameraList>>)
        >
      >('gp_list_new');
  late final _gp_list_new = _gp_list_newPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<CameraList>>)>();

  int gp_list_ref(ffi.Pointer<CameraList> list) {
    return _gp_list_ref(list);
  }

  late final _gp_list_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraList>)>>(
        'gp_list_ref',
      );
  late final _gp_list_ref = _gp_list_refPtr
      .asFunction<int Function(ffi.Pointer<CameraList>)>();

  int gp_list_unref(ffi.Pointer<CameraList> list) {
    return _gp_list_unref(list);
  }

  late final _gp_list_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraList>)>>(
        'gp_list_unref',
      );
  late final _gp_list_unref = _gp_list_unrefPtr
      .asFunction<int Function(ffi.Pointer<CameraList>)>();

  int gp_list_free(ffi.Pointer<CameraList> list) {
    return _gp_list_free(list);
  }

  late final _gp_list_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraList>)>>(
        'gp_list_free',
      );
  late final _gp_list_free = _gp_list_freePtr
      .asFunction<int Function(ffi.Pointer<CameraList>)>();

  int gp_list_count(ffi.Pointer<CameraList> list) {
    return _gp_list_count(list);
  }

  late final _gp_list_countPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraList>)>>(
        'gp_list_count',
      );
  late final _gp_list_count = _gp_list_countPtr
      .asFunction<int Function(ffi.Pointer<CameraList>)>();

  int gp_list_append(
    ffi.Pointer<CameraList> list,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _gp_list_append(list, name, value);
  }

  late final _gp_list_appendPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraList>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_list_append');
  late final _gp_list_append = _gp_list_appendPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraList>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  int gp_list_reset(ffi.Pointer<CameraList> list) {
    return _gp_list_reset(list);
  }

  late final _gp_list_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraList>)>>(
        'gp_list_reset',
      );
  late final _gp_list_reset = _gp_list_resetPtr
      .asFunction<int Function(ffi.Pointer<CameraList>)>();

  int gp_list_sort(ffi.Pointer<CameraList> list) {
    return _gp_list_sort(list);
  }

  late final _gp_list_sortPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraList>)>>(
        'gp_list_sort',
      );
  late final _gp_list_sort = _gp_list_sortPtr
      .asFunction<int Function(ffi.Pointer<CameraList>)>();

  int gp_list_find_by_name(
    ffi.Pointer<CameraList> list,
    ffi.Pointer<ffi.Int> index,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gp_list_find_by_name(list, index, name);
  }

  late final _gp_list_find_by_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraList>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_list_find_by_name');
  late final _gp_list_find_by_name = _gp_list_find_by_namePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraList>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  int gp_list_get_name(
    ffi.Pointer<CameraList> list,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
  ) {
    return _gp_list_get_name(list, index, name);
  }

  late final _gp_list_get_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraList>,
            ffi.Int,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('gp_list_get_name');
  late final _gp_list_get_name = _gp_list_get_namePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraList>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int gp_list_get_value(
    ffi.Pointer<CameraList> list,
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> value,
  ) {
    return _gp_list_get_value(list, index, value);
  }

  late final _gp_list_get_valuePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraList>,
            ffi.Int,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('gp_list_get_value');
  late final _gp_list_get_value = _gp_list_get_valuePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraList>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int gp_list_set_name(
    ffi.Pointer<CameraList> list,
    int index,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gp_list_set_name(list, index, name);
  }

  late final _gp_list_set_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraList>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_list_set_name');
  late final _gp_list_set_name = _gp_list_set_namePtr
      .asFunction<
        int Function(ffi.Pointer<CameraList>, int, ffi.Pointer<ffi.Char>)
      >();

  int gp_list_set_value(
    ffi.Pointer<CameraList> list,
    int index,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _gp_list_set_value(list, index, value);
  }

  late final _gp_list_set_valuePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraList>,
            ffi.Int,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_list_set_value');
  late final _gp_list_set_value = _gp_list_set_valuePtr
      .asFunction<
        int Function(ffi.Pointer<CameraList>, int, ffi.Pointer<ffi.Char>)
      >();

  int gp_list_populate(
    ffi.Pointer<CameraList> list,
    ffi.Pointer<ffi.Char> format,
    int count,
  ) {
    return _gp_list_populate(list, format, count);
  }

  late final _gp_list_populatePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraList>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
          )
        >
      >('gp_list_populate');
  late final _gp_list_populate = _gp_list_populatePtr
      .asFunction<
        int Function(ffi.Pointer<CameraList>, ffi.Pointer<ffi.Char>, int)
      >();

  int gp_abilities_list_new(
    ffi.Pointer<ffi.Pointer<CameraAbilitiesList>> list,
  ) {
    return _gp_abilities_list_new(list);
  }

  late final _gp_abilities_list_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<CameraAbilitiesList>>)
        >
      >('gp_abilities_list_new');
  late final _gp_abilities_list_new = _gp_abilities_list_newPtr
      .asFunction<
        int Function(ffi.Pointer<ffi.Pointer<CameraAbilitiesList>>)
      >();

  int gp_abilities_list_free(ffi.Pointer<CameraAbilitiesList> list) {
    return _gp_abilities_list_free(list);
  }

  late final _gp_abilities_list_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraAbilitiesList>)>
      >('gp_abilities_list_free');
  late final _gp_abilities_list_free = _gp_abilities_list_freePtr
      .asFunction<int Function(ffi.Pointer<CameraAbilitiesList>)>();

  int gp_abilities_list_load(
    ffi.Pointer<CameraAbilitiesList> list,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_abilities_list_load(list, context);
  }

  late final _gp_abilities_list_loadPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraAbilitiesList>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_abilities_list_load');
  late final _gp_abilities_list_load = _gp_abilities_list_loadPtr
      .asFunction<
        int Function(ffi.Pointer<CameraAbilitiesList>, ffi.Pointer<GPContext>)
      >();

  int gp_abilities_list_load_dir(
    ffi.Pointer<CameraAbilitiesList> list,
    ffi.Pointer<ffi.Char> dir,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_abilities_list_load_dir(list, dir, context);
  }

  late final _gp_abilities_list_load_dirPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraAbilitiesList>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_abilities_list_load_dir');
  late final _gp_abilities_list_load_dir = _gp_abilities_list_load_dirPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraAbilitiesList>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_abilities_list_reset(ffi.Pointer<CameraAbilitiesList> list) {
    return _gp_abilities_list_reset(list);
  }

  late final _gp_abilities_list_resetPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraAbilitiesList>)>
      >('gp_abilities_list_reset');
  late final _gp_abilities_list_reset = _gp_abilities_list_resetPtr
      .asFunction<int Function(ffi.Pointer<CameraAbilitiesList>)>();

  int gp_abilities_list_detect(
    ffi.Pointer<CameraAbilitiesList> list,
    ffi.Pointer<GPPortInfoList> info_list,
    ffi.Pointer<CameraList> l,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_abilities_list_detect(list, info_list, l, context);
  }

  late final _gp_abilities_list_detectPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraAbilitiesList>,
            ffi.Pointer<GPPortInfoList>,
            ffi.Pointer<CameraList>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_abilities_list_detect');
  late final _gp_abilities_list_detect = _gp_abilities_list_detectPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraAbilitiesList>,
          ffi.Pointer<GPPortInfoList>,
          ffi.Pointer<CameraList>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_abilities_list_append(
    ffi.Pointer<CameraAbilitiesList> list,
    CameraAbilities abilities,
  ) {
    return _gp_abilities_list_append(list, abilities);
  }

  late final _gp_abilities_list_appendPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraAbilitiesList>, CameraAbilities)
        >
      >('gp_abilities_list_append');
  late final _gp_abilities_list_append = _gp_abilities_list_appendPtr
      .asFunction<
        int Function(ffi.Pointer<CameraAbilitiesList>, CameraAbilities)
      >();

  int gp_abilities_list_count(ffi.Pointer<CameraAbilitiesList> list) {
    return _gp_abilities_list_count(list);
  }

  late final _gp_abilities_list_countPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraAbilitiesList>)>
      >('gp_abilities_list_count');
  late final _gp_abilities_list_count = _gp_abilities_list_countPtr
      .asFunction<int Function(ffi.Pointer<CameraAbilitiesList>)>();

  int gp_abilities_list_lookup_model(
    ffi.Pointer<CameraAbilitiesList> list,
    ffi.Pointer<ffi.Char> model,
  ) {
    return _gp_abilities_list_lookup_model(list, model);
  }

  late final _gp_abilities_list_lookup_modelPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraAbilitiesList>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_abilities_list_lookup_model');
  late final _gp_abilities_list_lookup_model =
      _gp_abilities_list_lookup_modelPtr
          .asFunction<
            int Function(
              ffi.Pointer<CameraAbilitiesList>,
              ffi.Pointer<ffi.Char>,
            )
          >();

  int gp_abilities_list_get_abilities(
    ffi.Pointer<CameraAbilitiesList> list,
    int index,
    ffi.Pointer<CameraAbilities> abilities,
  ) {
    return _gp_abilities_list_get_abilities(list, index, abilities);
  }

  late final _gp_abilities_list_get_abilitiesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraAbilitiesList>,
            ffi.Int,
            ffi.Pointer<CameraAbilities>,
          )
        >
      >('gp_abilities_list_get_abilities');
  late final _gp_abilities_list_get_abilities =
      _gp_abilities_list_get_abilitiesPtr
          .asFunction<
            int Function(
              ffi.Pointer<CameraAbilitiesList>,
              int,
              ffi.Pointer<CameraAbilities>,
            )
          >();

  ffi.Pointer<ffi.Char> gp_message_codeset(ffi.Pointer<ffi.Char> arg0) {
    return _gp_message_codeset(arg0);
  }

  late final _gp_message_codesetPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)
        >
      >('gp_message_codeset');
  late final _gp_message_codeset = _gp_message_codesetPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int gp_init_localedir(ffi.Pointer<ffi.Char> localedir) {
    return _gp_init_localedir(localedir);
  }

  late final _gp_init_localedirPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
        'gp_init_localedir',
      );
  late final _gp_init_localedir = _gp_init_localedirPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int gp_widget_new(
    CameraWidgetType type,
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Pointer<CameraWidget>> widget,
  ) {
    return _gp_widget_new(type.value, label, widget);
  }

  late final _gp_widget_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.UnsignedInt,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<CameraWidget>>,
          )
        >
      >('gp_widget_new');
  late final _gp_widget_new = _gp_widget_newPtr
      .asFunction<
        int Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<CameraWidget>>,
        )
      >();

  int gp_widget_free(ffi.Pointer<CameraWidget> widget) {
    return _gp_widget_free(widget);
  }

  late final _gp_widget_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraWidget>)>>(
        'gp_widget_free',
      );
  late final _gp_widget_free = _gp_widget_freePtr
      .asFunction<int Function(ffi.Pointer<CameraWidget>)>();

  int gp_widget_ref(ffi.Pointer<CameraWidget> widget) {
    return _gp_widget_ref(widget);
  }

  late final _gp_widget_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraWidget>)>>(
        'gp_widget_ref',
      );
  late final _gp_widget_ref = _gp_widget_refPtr
      .asFunction<int Function(ffi.Pointer<CameraWidget>)>();

  int gp_widget_unref(ffi.Pointer<CameraWidget> widget) {
    return _gp_widget_unref(widget);
  }

  late final _gp_widget_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraWidget>)>>(
        'gp_widget_unref',
      );
  late final _gp_widget_unref = _gp_widget_unrefPtr
      .asFunction<int Function(ffi.Pointer<CameraWidget>)>();

  int gp_widget_append(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<CameraWidget> child,
  ) {
    return _gp_widget_append(widget, child);
  }

  late final _gp_widget_appendPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<CameraWidget>)
        >
      >('gp_widget_append');
  late final _gp_widget_append = _gp_widget_appendPtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<CameraWidget>)
      >();

  int gp_widget_prepend(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<CameraWidget> child,
  ) {
    return _gp_widget_prepend(widget, child);
  }

  late final _gp_widget_prependPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<CameraWidget>)
        >
      >('gp_widget_prepend');
  late final _gp_widget_prepend = _gp_widget_prependPtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<CameraWidget>)
      >();

  int gp_widget_count_children(ffi.Pointer<CameraWidget> widget) {
    return _gp_widget_count_children(widget);
  }

  late final _gp_widget_count_childrenPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraWidget>)>>(
        'gp_widget_count_children',
      );
  late final _gp_widget_count_children = _gp_widget_count_childrenPtr
      .asFunction<int Function(ffi.Pointer<CameraWidget>)>();

  int gp_widget_get_child(
    ffi.Pointer<CameraWidget> widget,
    int child_number,
    ffi.Pointer<ffi.Pointer<CameraWidget>> child,
  ) {
    return _gp_widget_get_child(widget, child_number, child);
  }

  late final _gp_widget_get_childPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Int,
            ffi.Pointer<ffi.Pointer<CameraWidget>>,
          )
        >
      >('gp_widget_get_child');
  late final _gp_widget_get_child = _gp_widget_get_childPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          int,
          ffi.Pointer<ffi.Pointer<CameraWidget>>,
        )
      >();

  int gp_widget_get_child_by_label(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Char> label,
    ffi.Pointer<ffi.Pointer<CameraWidget>> child,
  ) {
    return _gp_widget_get_child_by_label(widget, label, child);
  }

  late final _gp_widget_get_child_by_labelPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<CameraWidget>>,
          )
        >
      >('gp_widget_get_child_by_label');
  late final _gp_widget_get_child_by_label = _gp_widget_get_child_by_labelPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<CameraWidget>>,
        )
      >();

  int gp_widget_get_child_by_id(
    ffi.Pointer<CameraWidget> widget,
    int id,
    ffi.Pointer<ffi.Pointer<CameraWidget>> child,
  ) {
    return _gp_widget_get_child_by_id(widget, id, child);
  }

  late final _gp_widget_get_child_by_idPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Int,
            ffi.Pointer<ffi.Pointer<CameraWidget>>,
          )
        >
      >('gp_widget_get_child_by_id');
  late final _gp_widget_get_child_by_id = _gp_widget_get_child_by_idPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          int,
          ffi.Pointer<ffi.Pointer<CameraWidget>>,
        )
      >();

  int gp_widget_get_child_by_name(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<CameraWidget>> child,
  ) {
    return _gp_widget_get_child_by_name(widget, name, child);
  }

  late final _gp_widget_get_child_by_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<CameraWidget>>,
          )
        >
      >('gp_widget_get_child_by_name');
  late final _gp_widget_get_child_by_name = _gp_widget_get_child_by_namePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<CameraWidget>>,
        )
      >();

  int gp_widget_get_root(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Pointer<CameraWidget>> root,
  ) {
    return _gp_widget_get_root(widget, root);
  }

  late final _gp_widget_get_rootPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<ffi.Pointer<CameraWidget>>,
          )
        >
      >('gp_widget_get_root');
  late final _gp_widget_get_root = _gp_widget_get_rootPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          ffi.Pointer<ffi.Pointer<CameraWidget>>,
        )
      >();

  int gp_widget_get_parent(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Pointer<CameraWidget>> parent,
  ) {
    return _gp_widget_get_parent(widget, parent);
  }

  late final _gp_widget_get_parentPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<ffi.Pointer<CameraWidget>>,
          )
        >
      >('gp_widget_get_parent');
  late final _gp_widget_get_parent = _gp_widget_get_parentPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          ffi.Pointer<ffi.Pointer<CameraWidget>>,
        )
      >();

  int gp_widget_set_value(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _gp_widget_set_value(widget, value);
  }

  late final _gp_widget_set_valuePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Void>)
        >
      >('gp_widget_set_value');
  late final _gp_widget_set_value = _gp_widget_set_valuePtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Void>)
      >();

  int gp_widget_get_value(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Void> value,
  ) {
    return _gp_widget_get_value(widget, value);
  }

  late final _gp_widget_get_valuePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Void>)
        >
      >('gp_widget_get_value');
  late final _gp_widget_get_value = _gp_widget_get_valuePtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Void>)
      >();

  int gp_widget_set_name(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _gp_widget_set_name(widget, name);
  }

  late final _gp_widget_set_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Char>)
        >
      >('gp_widget_set_name');
  late final _gp_widget_set_name = _gp_widget_set_namePtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Char>)
      >();

  int gp_widget_get_name(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Pointer<ffi.Char>> name,
  ) {
    return _gp_widget_get_name(widget, name);
  }

  late final _gp_widget_get_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('gp_widget_get_name');
  late final _gp_widget_get_name = _gp_widget_get_namePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int gp_widget_set_info(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Char> info,
  ) {
    return _gp_widget_set_info(widget, info);
  }

  late final _gp_widget_set_infoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Char>)
        >
      >('gp_widget_set_info');
  late final _gp_widget_set_info = _gp_widget_set_infoPtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Char>)
      >();

  int gp_widget_get_info(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Pointer<ffi.Char>> info,
  ) {
    return _gp_widget_get_info(widget, info);
  }

  late final _gp_widget_get_infoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('gp_widget_get_info');
  late final _gp_widget_get_info = _gp_widget_get_infoPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int gp_widget_get_id(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Int> id,
  ) {
    return _gp_widget_get_id(widget, id);
  }

  late final _gp_widget_get_idPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Int>)
        >
      >('gp_widget_get_id');
  late final _gp_widget_get_id = _gp_widget_get_idPtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Int>)
      >();

  int gp_widget_get_type(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.UnsignedInt> type,
  ) {
    return _gp_widget_get_type(widget, type);
  }

  late final _gp_widget_get_typePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<ffi.UnsignedInt>,
          )
        >
      >('gp_widget_get_type');
  late final _gp_widget_get_type = _gp_widget_get_typePtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.UnsignedInt>)
      >();

  int gp_widget_get_label(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Pointer<ffi.Char>> label,
  ) {
    return _gp_widget_get_label(widget, label);
  }

  late final _gp_widget_get_labelPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('gp_widget_get_label');
  late final _gp_widget_get_label = _gp_widget_get_labelPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int gp_widget_set_range(
    ffi.Pointer<CameraWidget> range,
    double low,
    double high,
    double increment,
  ) {
    return _gp_widget_set_range(range, low, high, increment);
  }

  late final _gp_widget_set_rangePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Float,
            ffi.Float,
            ffi.Float,
          )
        >
      >('gp_widget_set_range');
  late final _gp_widget_set_range = _gp_widget_set_rangePtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, double, double, double)
      >();

  int gp_widget_get_range(
    ffi.Pointer<CameraWidget> range,
    ffi.Pointer<ffi.Float> min,
    ffi.Pointer<ffi.Float> max,
    ffi.Pointer<ffi.Float> increment,
  ) {
    return _gp_widget_get_range(range, min, max, increment);
  }

  late final _gp_widget_get_rangePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<ffi.Float>,
            ffi.Pointer<ffi.Float>,
            ffi.Pointer<ffi.Float>,
          )
        >
      >('gp_widget_get_range');
  late final _gp_widget_get_range = _gp_widget_get_rangePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>,
        )
      >();

  int gp_widget_add_choice(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Char> choice,
  ) {
    return _gp_widget_add_choice(widget, choice);
  }

  late final _gp_widget_add_choicePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Char>)
        >
      >('gp_widget_add_choice');
  late final _gp_widget_add_choice = _gp_widget_add_choicePtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Char>)
      >();

  int gp_widget_count_choices(ffi.Pointer<CameraWidget> widget) {
    return _gp_widget_count_choices(widget);
  }

  late final _gp_widget_count_choicesPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraWidget>)>>(
        'gp_widget_count_choices',
      );
  late final _gp_widget_count_choices = _gp_widget_count_choicesPtr
      .asFunction<int Function(ffi.Pointer<CameraWidget>)>();

  int gp_widget_get_choice(
    ffi.Pointer<CameraWidget> widget,
    int choice_number,
    ffi.Pointer<ffi.Pointer<ffi.Char>> choice,
  ) {
    return _gp_widget_get_choice(widget, choice_number, choice);
  }

  late final _gp_widget_get_choicePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraWidget>,
            ffi.Int,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
          )
        >
      >('gp_widget_get_choice');
  late final _gp_widget_get_choice = _gp_widget_get_choicePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraWidget>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
        )
      >();

  int gp_widget_changed(ffi.Pointer<CameraWidget> widget) {
    return _gp_widget_changed(widget);
  }

  late final _gp_widget_changedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraWidget>)>>(
        'gp_widget_changed',
      );
  late final _gp_widget_changed = _gp_widget_changedPtr
      .asFunction<int Function(ffi.Pointer<CameraWidget>)>();

  int gp_widget_set_changed(ffi.Pointer<CameraWidget> widget, int changed) {
    return _gp_widget_set_changed(widget, changed);
  }

  late final _gp_widget_set_changedPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Int)>
      >('gp_widget_set_changed');
  late final _gp_widget_set_changed = _gp_widget_set_changedPtr
      .asFunction<int Function(ffi.Pointer<CameraWidget>, int)>();

  int gp_widget_set_readonly(ffi.Pointer<CameraWidget> widget, int readonly) {
    return _gp_widget_set_readonly(widget, readonly);
  }

  late final _gp_widget_set_readonlyPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Int)>
      >('gp_widget_set_readonly');
  late final _gp_widget_set_readonly = _gp_widget_set_readonlyPtr
      .asFunction<int Function(ffi.Pointer<CameraWidget>, int)>();

  int gp_widget_get_readonly(
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<ffi.Int> readonly,
  ) {
    return _gp_widget_get_readonly(widget, readonly);
  }

  late final _gp_widget_get_readonlyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Int>)
        >
      >('gp_widget_get_readonly');
  late final _gp_widget_get_readonly = _gp_widget_get_readonlyPtr
      .asFunction<
        int Function(ffi.Pointer<CameraWidget>, ffi.Pointer<ffi.Int>)
      >();

  int gp_filesystem_new(ffi.Pointer<ffi.Pointer<CameraFilesystem>> fs) {
    return _gp_filesystem_new(fs);
  }

  late final _gp_filesystem_newPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<CameraFilesystem>>)
        >
      >('gp_filesystem_new');
  late final _gp_filesystem_new = _gp_filesystem_newPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<CameraFilesystem>>)>();

  int gp_filesystem_free(ffi.Pointer<CameraFilesystem> fs) {
    return _gp_filesystem_free(fs);
  }

  late final _gp_filesystem_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraFilesystem>)>
      >('gp_filesystem_free');
  late final _gp_filesystem_free = _gp_filesystem_freePtr
      .asFunction<int Function(ffi.Pointer<CameraFilesystem>)>();

  int gp_filesystem_append(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_append(fs, folder, filename, context);
  }

  late final _gp_filesystem_appendPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_append');
  late final _gp_filesystem_append = _gp_filesystem_appendPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_set_info_noop(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    CameraFileInfo info,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_set_info_noop(fs, folder, filename, info, context);
  }

  late final _gp_filesystem_set_info_noopPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            CameraFileInfo,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_set_info_noop');
  late final _gp_filesystem_set_info_noop = _gp_filesystem_set_info_noopPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          CameraFileInfo,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_set_info_dirty(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_set_info_dirty(fs, folder, filename, context);
  }

  late final _gp_filesystem_set_info_dirtyPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_set_info_dirty');
  late final _gp_filesystem_set_info_dirty = _gp_filesystem_set_info_dirtyPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_set_file_noop(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    CameraFileType type,
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_set_file_noop(
      fs,
      folder,
      filename,
      type.value,
      file,
      context,
    );
  }

  late final _gp_filesystem_set_file_noopPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
            ffi.Pointer<CameraFile>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_set_file_noop');
  late final _gp_filesystem_set_file_noop = _gp_filesystem_set_file_noopPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<CameraFile>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_delete_file_noop(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_delete_file_noop(fs, folder, filename, context);
  }

  late final _gp_filesystem_delete_file_noopPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_delete_file_noop');
  late final _gp_filesystem_delete_file_noop =
      _gp_filesystem_delete_file_noopPtr
          .asFunction<
            int Function(
              ffi.Pointer<CameraFilesystem>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<GPContext>,
            )
          >();

  int gp_filesystem_reset(ffi.Pointer<CameraFilesystem> fs) {
    return _gp_filesystem_reset(fs);
  }

  late final _gp_filesystem_resetPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraFilesystem>)>
      >('gp_filesystem_reset');
  late final _gp_filesystem_reset = _gp_filesystem_resetPtr
      .asFunction<int Function(ffi.Pointer<CameraFilesystem>)>();

  int gp_filesystem_count(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_count(fs, folder, context);
  }

  late final _gp_filesystem_countPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_count');
  late final _gp_filesystem_count = _gp_filesystem_countPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_name(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    int filenumber,
    ffi.Pointer<ffi.Pointer<ffi.Char>> filename,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_name(fs, folder, filenumber, filename, context);
  }

  late final _gp_filesystem_namePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Int,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_name');
  late final _gp_filesystem_name = _gp_filesystem_namePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_get_folder(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<ffi.Pointer<ffi.Char>> folder,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_get_folder(fs, filename, folder, context);
  }

  late final _gp_filesystem_get_folderPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_get_folder');
  late final _gp_filesystem_get_folder = _gp_filesystem_get_folderPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_number(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_number(fs, folder, filename, context);
  }

  late final _gp_filesystem_numberPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_number');
  late final _gp_filesystem_number = _gp_filesystem_numberPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_list_files(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<CameraList> list,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_list_files(fs, folder, list, context);
  }

  late final _gp_filesystem_list_filesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<CameraList>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_list_files');
  late final _gp_filesystem_list_files = _gp_filesystem_list_filesPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<CameraList>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_list_folders(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<CameraList> list,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_list_folders(fs, folder, list, context);
  }

  late final _gp_filesystem_list_foldersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<CameraList>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_list_folders');
  late final _gp_filesystem_list_folders = _gp_filesystem_list_foldersPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<CameraList>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_get_info(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<CameraFileInfo> info,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_get_info(fs, folder, filename, info, context);
  }

  late final _gp_filesystem_get_infoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<CameraFileInfo>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_get_info');
  late final _gp_filesystem_get_info = _gp_filesystem_get_infoPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<CameraFileInfo>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_set_info(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    CameraFileInfo info,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_set_info(fs, folder, filename, info, context);
  }

  late final _gp_filesystem_set_infoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            CameraFileInfo,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_set_info');
  late final _gp_filesystem_set_info = _gp_filesystem_set_infoPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          CameraFileInfo,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_get_file(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    CameraFileType type,
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_get_file(
      fs,
      folder,
      filename,
      type.value,
      file,
      context,
    );
  }

  late final _gp_filesystem_get_filePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
            ffi.Pointer<CameraFile>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_get_file');
  late final _gp_filesystem_get_file = _gp_filesystem_get_filePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<CameraFile>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_read_file(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    CameraFileType type,
    int offset,
    ffi.Pointer<ffi.Char> buf,
    ffi.Pointer<ffi.Uint64> size,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_read_file(
      fs,
      folder,
      filename,
      type.value,
      offset,
      buf,
      size,
      context,
    );
  }

  late final _gp_filesystem_read_filePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
            ffi.Uint64,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Uint64>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_read_file');
  late final _gp_filesystem_read_file = _gp_filesystem_read_filePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_delete_file(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_delete_file(fs, folder, filename, context);
  }

  late final _gp_filesystem_delete_filePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_delete_file');
  late final _gp_filesystem_delete_file = _gp_filesystem_delete_filePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_get_storageinfo(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Pointer<CameraStorageInformation>> arg1,
    ffi.Pointer<ffi.Int> nrofstorageinformations,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_get_storageinfo(
      fs,
      arg1,
      nrofstorageinformations,
      context,
    );
  }

  late final _gp_filesystem_get_storageinfoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Pointer<CameraStorageInformation>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_get_storageinfo');
  late final _gp_filesystem_get_storageinfo = _gp_filesystem_get_storageinfoPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Pointer<CameraStorageInformation>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_set_funcs(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<CameraFilesystemFuncs> funcs,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gp_filesystem_set_funcs(fs, funcs, data);
  }

  late final _gp_filesystem_set_funcsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<CameraFilesystemFuncs>,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('gp_filesystem_set_funcs');
  late final _gp_filesystem_set_funcs = _gp_filesystem_set_funcsPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<CameraFilesystemFuncs>,
          ffi.Pointer<ffi.Void>,
        )
      >();

  int gp_filesystem_put_file(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    CameraFileType type,
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_put_file(
      fs,
      folder,
      filename,
      type.value,
      file,
      context,
    );
  }

  late final _gp_filesystem_put_filePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
            ffi.Pointer<CameraFile>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_put_file');
  late final _gp_filesystem_put_file = _gp_filesystem_put_filePtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<CameraFile>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_delete_all(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_delete_all(fs, folder, context);
  }

  late final _gp_filesystem_delete_allPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_delete_all');
  late final _gp_filesystem_delete_all = _gp_filesystem_delete_allPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_make_dir(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_make_dir(fs, folder, name, context);
  }

  late final _gp_filesystem_make_dirPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_make_dir');
  late final _gp_filesystem_make_dir = _gp_filesystem_make_dirPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_remove_dir(
    ffi.Pointer<CameraFilesystem> fs,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_filesystem_remove_dir(fs, folder, name, context);
  }

  late final _gp_filesystem_remove_dirPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<CameraFilesystem>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_filesystem_remove_dir');
  late final _gp_filesystem_remove_dir = _gp_filesystem_remove_dirPtr
      .asFunction<
        int Function(
          ffi.Pointer<CameraFilesystem>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_filesystem_dump(ffi.Pointer<CameraFilesystem> fs) {
    return _gp_filesystem_dump(fs);
  }

  late final _gp_filesystem_dumpPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraFilesystem>)>
      >('gp_filesystem_dump');
  late final _gp_filesystem_dump = _gp_filesystem_dumpPtr
      .asFunction<int Function(ffi.Pointer<CameraFilesystem>)>();

  ffi.Pointer<ffi.Char> gp_result_as_string(int result) {
    return _gp_result_as_string(result);
  }

  late final _gp_result_as_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
        'gp_result_as_string',
      );
  late final _gp_result_as_string = _gp_result_as_stringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  /// Create a new camera device.
  int gp_camera_new(ffi.Pointer<ffi.Pointer<Camera>> camera) {
    return _gp_camera_new(camera);
  }

  late final _gp_camera_newPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Pointer<Camera>>)>
      >('gp_camera_new');
  late final _gp_camera_new = _gp_camera_newPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<Camera>>)>();

  /// \name Preparing initialization
  /// @{
  int gp_camera_set_abilities(
    ffi.Pointer<Camera> camera,
    CameraAbilities abilities,
  ) {
    return _gp_camera_set_abilities(camera, abilities);
  }

  late final _gp_camera_set_abilitiesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Camera>, CameraAbilities)
        >
      >('gp_camera_set_abilities');
  late final _gp_camera_set_abilities = _gp_camera_set_abilitiesPtr
      .asFunction<int Function(ffi.Pointer<Camera>, CameraAbilities)>();

  int gp_camera_get_abilities(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<CameraAbilities> abilities,
  ) {
    return _gp_camera_get_abilities(camera, abilities);
  }

  late final _gp_camera_get_abilitiesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Camera>, ffi.Pointer<CameraAbilities>)
        >
      >('gp_camera_get_abilities');
  late final _gp_camera_get_abilities = _gp_camera_get_abilitiesPtr
      .asFunction<
        int Function(ffi.Pointer<Camera>, ffi.Pointer<CameraAbilities>)
      >();

  int gp_camera_set_port_info(ffi.Pointer<Camera> camera, GPPortInfo info) {
    return _gp_camera_set_port_info(camera, info);
  }

  late final _gp_camera_set_port_infoPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Camera>, GPPortInfo)>
      >('gp_camera_set_port_info');
  late final _gp_camera_set_port_info = _gp_camera_set_port_infoPtr
      .asFunction<int Function(ffi.Pointer<Camera>, GPPortInfo)>();

  int gp_camera_get_port_info(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<GPPortInfo> info,
  ) {
    return _gp_camera_get_port_info(camera, info);
  }

  late final _gp_camera_get_port_infoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Camera>, ffi.Pointer<GPPortInfo>)
        >
      >('gp_camera_get_port_info');
  late final _gp_camera_get_port_info = _gp_camera_get_port_infoPtr
      .asFunction<int Function(ffi.Pointer<Camera>, ffi.Pointer<GPPortInfo>)>();

  /// \name camera speed
  ///
  /// You normally don't use that. If you do, you prevent the camera driver
  /// from selecting the optimal speed.
  ///
  /// @{
  int gp_camera_set_port_speed(ffi.Pointer<Camera> camera, int speed) {
    return _gp_camera_set_port_speed(camera, speed);
  }

  late final _gp_camera_set_port_speedPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Camera>, ffi.Int)>
      >('gp_camera_set_port_speed');
  late final _gp_camera_set_port_speed = _gp_camera_set_port_speedPtr
      .asFunction<int Function(ffi.Pointer<Camera>, int)>();

  int gp_camera_get_port_speed(ffi.Pointer<Camera> camera) {
    return _gp_camera_get_port_speed(camera);
  }

  late final _gp_camera_get_port_speedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Camera>)>>(
        'gp_camera_get_port_speed',
      );
  late final _gp_camera_get_port_speed = _gp_camera_get_port_speedPtr
      .asFunction<int Function(ffi.Pointer<Camera>)>();

  /// \name Initialization
  /// @{
  int gp_camera_autodetect(
    ffi.Pointer<CameraList> list,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_autodetect(list, context);
  }

  late final _gp_camera_autodetectPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<CameraList>, ffi.Pointer<GPContext>)
        >
      >('gp_camera_autodetect');
  late final _gp_camera_autodetect = _gp_camera_autodetectPtr
      .asFunction<
        int Function(ffi.Pointer<CameraList>, ffi.Pointer<GPContext>)
      >();

  int gp_camera_init(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_init(camera, context);
  }

  late final _gp_camera_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Camera>, ffi.Pointer<GPContext>)
        >
      >('gp_camera_init');
  late final _gp_camera_init = _gp_camera_initPtr
      .asFunction<int Function(ffi.Pointer<Camera>, ffi.Pointer<GPContext>)>();

  int gp_camera_exit(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_exit(camera, context);
  }

  late final _gp_camera_exitPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Camera>, ffi.Pointer<GPContext>)
        >
      >('gp_camera_exit');
  late final _gp_camera_exit = _gp_camera_exitPtr
      .asFunction<int Function(ffi.Pointer<Camera>, ffi.Pointer<GPContext>)>();

  /// \name Operations on cameras
  /// @{
  int gp_camera_ref(ffi.Pointer<Camera> camera) {
    return _gp_camera_ref(camera);
  }

  late final _gp_camera_refPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Camera>)>>(
        'gp_camera_ref',
      );
  late final _gp_camera_ref = _gp_camera_refPtr
      .asFunction<int Function(ffi.Pointer<Camera>)>();

  int gp_camera_unref(ffi.Pointer<Camera> camera) {
    return _gp_camera_unref(camera);
  }

  late final _gp_camera_unrefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Camera>)>>(
        'gp_camera_unref',
      );
  late final _gp_camera_unref = _gp_camera_unrefPtr
      .asFunction<int Function(ffi.Pointer<Camera>)>();

  int gp_camera_free(ffi.Pointer<Camera> camera) {
    return _gp_camera_free(camera);
  }

  late final _gp_camera_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Camera>)>>(
        'gp_camera_free',
      );
  late final _gp_camera_free = _gp_camera_freePtr
      .asFunction<int Function(ffi.Pointer<Camera>)>();

  int gp_camera_get_config(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Pointer<CameraWidget>> window,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_get_config(camera, window, context);
  }

  late final _gp_camera_get_configPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Pointer<CameraWidget>>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_get_config');
  late final _gp_camera_get_config = _gp_camera_get_configPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Pointer<CameraWidget>>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_list_config(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<CameraList> list,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_list_config(camera, list, context);
  }

  late final _gp_camera_list_configPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<CameraList>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_list_config');
  late final _gp_camera_list_config = _gp_camera_list_configPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<CameraList>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_get_single_config(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Pointer<CameraWidget>> widget,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_get_single_config(camera, name, widget, context);
  }

  late final _gp_camera_get_single_configPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Pointer<CameraWidget>>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_get_single_config');
  late final _gp_camera_get_single_config = _gp_camera_get_single_configPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<CameraWidget>>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_set_config(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<CameraWidget> window,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_set_config(camera, window, context);
  }

  late final _gp_camera_set_configPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_set_config');
  late final _gp_camera_set_config = _gp_camera_set_configPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<CameraWidget>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_set_single_config(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<CameraWidget> widget,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_set_single_config(camera, name, widget, context);
  }

  late final _gp_camera_set_single_configPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<CameraWidget>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_set_single_config');
  late final _gp_camera_set_single_config = _gp_camera_set_single_configPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<CameraWidget>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_get_summary(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<CameraText> summary,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_get_summary(camera, summary, context);
  }

  late final _gp_camera_get_summaryPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<CameraText>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_get_summary');
  late final _gp_camera_get_summary = _gp_camera_get_summaryPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<CameraText>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_get_manual(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<CameraText> manual,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_get_manual(camera, manual, context);
  }

  late final _gp_camera_get_manualPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<CameraText>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_get_manual');
  late final _gp_camera_get_manual = _gp_camera_get_manualPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<CameraText>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_get_about(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<CameraText> about,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_get_about(camera, about, context);
  }

  late final _gp_camera_get_aboutPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<CameraText>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_get_about');
  late final _gp_camera_get_about = _gp_camera_get_aboutPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<CameraText>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_capture(
    ffi.Pointer<Camera> camera,
    CameraCaptureType type,
    ffi.Pointer<CameraFilePath> path,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_capture(camera, type.value, path, context);
  }

  late final _gp_camera_capturePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.UnsignedInt,
            ffi.Pointer<CameraFilePath>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_capture');
  late final _gp_camera_capture = _gp_camera_capturePtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          int,
          ffi.Pointer<CameraFilePath>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_trigger_capture(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_trigger_capture(camera, context);
  }

  late final _gp_camera_trigger_capturePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Camera>, ffi.Pointer<GPContext>)
        >
      >('gp_camera_trigger_capture');
  late final _gp_camera_trigger_capture = _gp_camera_trigger_capturePtr
      .asFunction<int Function(ffi.Pointer<Camera>, ffi.Pointer<GPContext>)>();

  int gp_camera_capture_preview(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_capture_preview(camera, file, context);
  }

  late final _gp_camera_capture_previewPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<CameraFile>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_capture_preview');
  late final _gp_camera_capture_preview = _gp_camera_capture_previewPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<CameraFile>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_wait_for_event(
    ffi.Pointer<Camera> camera,
    int timeout,
    ffi.Pointer<ffi.UnsignedInt> eventtype,
    ffi.Pointer<ffi.Pointer<ffi.Void>> eventdata,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_wait_for_event(
      camera,
      timeout,
      eventtype,
      eventdata,
      context,
    );
  }

  late final _gp_camera_wait_for_eventPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Int,
            ffi.Pointer<ffi.UnsignedInt>,
            ffi.Pointer<ffi.Pointer<ffi.Void>>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_wait_for_event');
  late final _gp_camera_wait_for_event = _gp_camera_wait_for_eventPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          int,
          ffi.Pointer<ffi.UnsignedInt>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_get_storageinfo(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Pointer<CameraStorageInformation>> arg1,
    ffi.Pointer<ffi.Int> arg2,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_get_storageinfo(camera, arg1, arg2, context);
  }

  late final _gp_camera_get_storageinfoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Pointer<CameraStorageInformation>>,
            ffi.Pointer<ffi.Int>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_get_storageinfo');
  late final _gp_camera_get_storageinfo = _gp_camera_get_storageinfoPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Pointer<CameraStorageInformation>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<GPContext>,
        )
      >();

  /// \name Operations on folders
  /// @{
  int gp_camera_folder_list_files(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<CameraList> list,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_folder_list_files(camera, folder, list, context);
  }

  late final _gp_camera_folder_list_filesPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<CameraList>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_folder_list_files');
  late final _gp_camera_folder_list_files = _gp_camera_folder_list_filesPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<CameraList>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_folder_list_folders(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<CameraList> list,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_folder_list_folders(camera, folder, list, context);
  }

  late final _gp_camera_folder_list_foldersPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<CameraList>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_folder_list_folders');
  late final _gp_camera_folder_list_folders = _gp_camera_folder_list_foldersPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<CameraList>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_folder_delete_all(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_folder_delete_all(camera, folder, context);
  }

  late final _gp_camera_folder_delete_allPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_folder_delete_all');
  late final _gp_camera_folder_delete_all = _gp_camera_folder_delete_allPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_folder_put_file(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> filename,
    CameraFileType type,
    ffi.Pointer<CameraFile> file,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_folder_put_file(
      camera,
      folder,
      filename,
      type.value,
      file,
      context,
    );
  }

  late final _gp_camera_folder_put_filePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
            ffi.Pointer<CameraFile>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_folder_put_file');
  late final _gp_camera_folder_put_file = _gp_camera_folder_put_filePtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<CameraFile>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_folder_make_dir(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_folder_make_dir(camera, folder, name, context);
  }

  late final _gp_camera_folder_make_dirPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_folder_make_dir');
  late final _gp_camera_folder_make_dir = _gp_camera_folder_make_dirPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_folder_remove_dir(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_folder_remove_dir(camera, folder, name, context);
  }

  late final _gp_camera_folder_remove_dirPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_folder_remove_dir');
  late final _gp_camera_folder_remove_dir = _gp_camera_folder_remove_dirPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  /// \name Operations on files
  /// @{
  int gp_camera_file_get_info(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<CameraFileInfo> info,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_file_get_info(camera, folder, file, info, context);
  }

  late final _gp_camera_file_get_infoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<CameraFileInfo>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_file_get_info');
  late final _gp_camera_file_get_info = _gp_camera_file_get_infoPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<CameraFileInfo>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_file_set_info(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> file,
    CameraFileInfo info,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_file_set_info(camera, folder, file, info, context);
  }

  late final _gp_camera_file_set_infoPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            CameraFileInfo,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_file_set_info');
  late final _gp_camera_file_set_info = _gp_camera_file_set_infoPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          CameraFileInfo,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_file_get(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> file,
    CameraFileType type,
    ffi.Pointer<CameraFile> camera_file,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_file_get(
      camera,
      folder,
      file,
      type.value,
      camera_file,
      context,
    );
  }

  late final _gp_camera_file_getPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
            ffi.Pointer<CameraFile>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_file_get');
  late final _gp_camera_file_get = _gp_camera_file_getPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<CameraFile>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_file_read(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> file,
    CameraFileType type,
    int offset,
    ffi.Pointer<ffi.Char> buf,
    ffi.Pointer<ffi.Uint64> size,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_file_read(
      camera,
      folder,
      file,
      type.value,
      offset,
      buf,
      size,
      context,
    );
  }

  late final _gp_camera_file_readPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.UnsignedInt,
            ffi.Uint64,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Uint64>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_file_read');
  late final _gp_camera_file_read = _gp_camera_file_readPtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Uint64>,
          ffi.Pointer<GPContext>,
        )
      >();

  int gp_camera_file_delete(
    ffi.Pointer<Camera> camera,
    ffi.Pointer<ffi.Char> folder,
    ffi.Pointer<ffi.Char> file,
    ffi.Pointer<GPContext> context,
  ) {
    return _gp_camera_file_delete(camera, folder, file, context);
  }

  late final _gp_camera_file_deletePtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<GPContext>,
          )
        >
      >('gp_camera_file_delete');
  late final _gp_camera_file_delete = _gp_camera_file_deletePtr
      .asFunction<
        int Function(
          ffi.Pointer<Camera>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<GPContext>,
        )
      >();

  void gp_camera_set_timeout_funcs(
    ffi.Pointer<Camera> camera,
    CameraTimeoutStartFunc start_func,
    CameraTimeoutStopFunc stop_func,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gp_camera_set_timeout_funcs(camera, start_func, stop_func, data);
  }

  late final _gp_camera_set_timeout_funcsPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(
            ffi.Pointer<Camera>,
            CameraTimeoutStartFunc,
            CameraTimeoutStopFunc,
            ffi.Pointer<ffi.Void>,
          )
        >
      >('gp_camera_set_timeout_funcs');
  late final _gp_camera_set_timeout_funcs = _gp_camera_set_timeout_funcsPtr
      .asFunction<
        void Function(
          ffi.Pointer<Camera>,
          CameraTimeoutStartFunc,
          CameraTimeoutStopFunc,
          ffi.Pointer<ffi.Void>,
        )
      >();

  int gp_camera_start_timeout(
    ffi.Pointer<Camera> camera,
    int timeout,
    CameraTimeoutFunc func,
  ) {
    return _gp_camera_start_timeout(camera, timeout, func);
  }

  late final _gp_camera_start_timeoutPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<Camera>,
            ffi.UnsignedInt,
            CameraTimeoutFunc,
          )
        >
      >('gp_camera_start_timeout');
  late final _gp_camera_start_timeout = _gp_camera_start_timeoutPtr
      .asFunction<int Function(ffi.Pointer<Camera>, int, CameraTimeoutFunc)>();

  void gp_camera_stop_timeout(ffi.Pointer<Camera> camera, int id) {
    return _gp_camera_stop_timeout(camera, id);
  }

  late final _gp_camera_stop_timeoutPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Camera>, ffi.UnsignedInt)
        >
      >('gp_camera_stop_timeout');
  late final _gp_camera_stop_timeout = _gp_camera_stop_timeoutPtr
      .asFunction<void Function(ffi.Pointer<Camera>, int)>();

  int camera_id(ffi.Pointer<CameraText> id) {
    return _camera_id(id);
  }

  late final _camera_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraText>)>>(
        'camera_id',
      );
  late final _camera_id = _camera_idPtr
      .asFunction<int Function(ffi.Pointer<CameraText>)>();

  int camera_abilities(ffi.Pointer<CameraAbilitiesList> list) {
    return _camera_abilities(list);
  }

  late final _camera_abilitiesPtr =
      _lookup<
        ffi.NativeFunction<ffi.Int Function(ffi.Pointer<CameraAbilitiesList>)>
      >('camera_abilities');
  late final _camera_abilities = _camera_abilitiesPtr
      .asFunction<int Function(ffi.Pointer<CameraAbilitiesList>)>();

  int camera_init(ffi.Pointer<Camera> camera, ffi.Pointer<GPContext> context) {
    return _camera_init(camera, context);
  }

  late final _camera_initPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Camera>, ffi.Pointer<GPContext>)
        >
      >('camera_init');
  late final _camera_init = _camera_initPtr
      .asFunction<int Function(ffi.Pointer<Camera>, ffi.Pointer<GPContext>)>();

  void gp_setting_set_get_func(
    gp_settings_func func,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _gp_setting_set_get_func(func, userdata);
  }

  late final _gp_setting_set_get_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(gp_settings_func, ffi.Pointer<ffi.Void>)
        >
      >('gp_setting_set_get_func');
  late final _gp_setting_set_get_func = _gp_setting_set_get_funcPtr
      .asFunction<void Function(gp_settings_func, ffi.Pointer<ffi.Void>)>();

  void gp_setting_set_set_func(
    gp_settings_func func,
    ffi.Pointer<ffi.Void> userdata,
  ) {
    return _gp_setting_set_set_func(func, userdata);
  }

  late final _gp_setting_set_set_funcPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(gp_settings_func, ffi.Pointer<ffi.Void>)
        >
      >('gp_setting_set_set_func');
  late final _gp_setting_set_set_func = _gp_setting_set_set_funcPtr
      .asFunction<void Function(gp_settings_func, ffi.Pointer<ffi.Void>)>();

  int gp_setting_set(
    ffi.Pointer<ffi.Char> id,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _gp_setting_set(id, key, value);
  }

  late final _gp_setting_setPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_setting_set');
  late final _gp_setting_set = _gp_setting_setPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();

  int gp_setting_get(
    ffi.Pointer<ffi.Char> id,
    ffi.Pointer<ffi.Char> key,
    ffi.Pointer<ffi.Char> value,
  ) {
    return _gp_setting_get(id, key, value);
  }

  late final _gp_setting_getPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Int Function(
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Char>,
          )
        >
      >('gp_setting_get');
  late final _gp_setting_get = _gp_setting_getPtr
      .asFunction<
        int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
        )
      >();
}

/// \brief The gphoto port type.
///
/// Enumeration specifying the port type.
/// The enum is providing bitmasks, but most code uses it as
/// just the one specific values.
enum GPPortType {
  /// < \brief No specific type associated.
  GP_PORT_NONE(0),

  /// < \brief Serial port.
  GP_PORT_SERIAL(1),

  /// < \brief USB port.
  GP_PORT_USB(4),

  /// < \brief Disk / local mountpoint port.
  GP_PORT_DISK(8),

  /// < \brief PTP/IP port.
  GP_PORT_PTPIP(16),

  /// < \brief Direct IO to an usb mass storage device.
  GP_PORT_USB_DISK_DIRECT(32),

  /// < \brief USB Mass Storage raw SCSI port.
  GP_PORT_USB_SCSI(64),

  /// < \brief generic IP address port.
  GP_PORT_IP(128);

  final int value;
  const GPPortType(this.value);

  static GPPortType fromValue(int value) => switch (value) {
    0 => GP_PORT_NONE,
    1 => GP_PORT_SERIAL,
    4 => GP_PORT_USB,
    8 => GP_PORT_DISK,
    16 => GP_PORT_PTPIP,
    32 => GP_PORT_USB_DISK_DIRECT,
    64 => GP_PORT_USB_SCSI,
    128 => GP_PORT_IP,
    _ => throw ArgumentError('Unknown value for GPPortType: $value'),
  };
}

/// \brief Information about the current port.
///
/// Specific information about the current port. Usually taken from the
/// "--port=XXXX" setting from the frontend.
///
/// This is not to be confused with the driver configurable port settings
/// in \ref GPPortSettings.
final class _GPPortInfo extends ffi.Opaque {}

typedef GPPortInfo = ffi.Pointer<_GPPortInfo>;

final class _GPPortInfoList extends ffi.Opaque {}

typedef GPPortInfoList = _GPPortInfoList;

/// \brief Serial parity
///
/// Parity of the serial port.
enum _GPPortSerialParity {
  /// < \brief Parity is off (disabled)
  GP_PORT_SERIAL_PARITY_OFF(0),

  /// < \brief Parity is even.
  GP_PORT_SERIAL_PARITY_EVEN(1),

  /// < \brief Parity is odd.
  GP_PORT_SERIAL_PARITY_ODD(2);

  final int value;
  const _GPPortSerialParity(this.value);

  static _GPPortSerialParity fromValue(int value) => switch (value) {
    0 => GP_PORT_SERIAL_PARITY_OFF,
    1 => GP_PORT_SERIAL_PARITY_EVEN,
    2 => GP_PORT_SERIAL_PARITY_ODD,
    _ => throw ArgumentError('Unknown value for _GPPortSerialParity: $value'),
  };
}

/// \brief Port settings for serial ports.
final class _GPPortSettingsSerial extends ffi.Struct {
  /// < The portname (/dev/ttyX)
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> port;

  /// < The baudrate of the device.
  @ffi.Int()
  external int speed;

  /// < How many bits data.
  @ffi.Int()
  external int bits;

  /// < parity data, see GP_PORT_SERIAL_PARITY_
  /// defines
  @ffi.UnsignedInt()
  external int parityAsInt;

  _GPPortSerialParity get parity => _GPPortSerialParity.fromValue(parityAsInt);

  /// < How many stop bits are used.
  @ffi.Int()
  external int stopbits;
}

/// \brief Port settings for serial ports.
typedef GPPortSettingsSerial = _GPPortSettingsSerial;

/// \brief Port settings for USB ports.
final class _GPPortSettingsUSB extends ffi.Struct {
  /// < \brief Bulk IN endpoint used.
  @ffi.Int()
  external int inep;

  /// < \brief Bulk OUT endpoint used.
  @ffi.Int()
  external int outep;

  /// < \brief Interrupt endpoint used.
  @ffi.Int()
  external int intep;

  /// < \brief USB bConfigurationValue used.
  @ffi.Int()
  external int config;

  /// < \brief USB Interface number used.
  @ffi.Int()
  external int interface$;

  /// < \brief USB Alternative Setting used.
  @ffi.Int()
  external int altsetting;

  /// < \brief Maximum USB packetsize of the IN endpoint. (r/o)
  @ffi.Int()
  external int maxpacketsize;

  /// < \brief USB Portname. Specific to lowlevel USB.
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> port;
}

/// \brief Port settings for USB ports.
typedef GPPortSettingsUSB = _GPPortSettingsUSB;

/// \brief Port settings for USB mass storage direct IO ports.
final class _GPPortSettingsUsbDiskDirect extends ffi.Struct {
  /// < /brief The ports device node path (/dev/sdX)
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> path;
}

/// \brief Port settings for USB mass storage direct IO ports.
typedef GPPortSettingsUsbDiskDirect = _GPPortSettingsUsbDiskDirect;

/// \brief Port settings for USB Mass Storage raw SCSI ports.
final class _GPPortSettingsUsbScsi extends ffi.Struct {
  /// < /brief The ports device node path (/dev/sg#)
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> path;
}

/// \brief Port settings for USB Mass Storage raw SCSI ports.
typedef GPPortSettingsUsbScsi = _GPPortSettingsUsbScsi;

/// \brief Union of port settings.
///
/// This contains a shared union of possible settings for ports needing
/// them.
final class _GPPortSettings extends ffi.Union {
  /// < \brief Serial specific settings
  external GPPortSettingsSerial serial;

  /// < \brief USB specific settings
  external GPPortSettingsUSB usb;

  /// < \brief usb disk direct port specific settings
  external GPPortSettingsUsbDiskDirect usbdiskdirect;

  /// < \brief usb scsi port specific settings
  external GPPortSettingsUsbScsi usbscsi;
}

/// \brief Union of port settings.
///
/// This contains a shared union of possible settings for ports needing
/// them.
typedef GPPortSettings = _GPPortSettings;

final class _GPPortPrivateLibrary extends ffi.Opaque {}

typedef GPPortPrivateLibrary = _GPPortPrivateLibrary;

final class _GPPortPrivateCore extends ffi.Opaque {}

typedef GPPortPrivateCore = _GPPortPrivateCore;

/// \brief The GPhoto port structure.
///
/// This structure tracks the physical connection of the device.
/// It can correspond the various methods of lowlevel access, serial
/// usb and others and abstracts them as much as possible.
///
/// Frontends should consider this structure opaque and only use accessor
/// functions.
///
/// Camera drivers should only access the type and pl members directly,
/// and use accessor functions for the rest.
final class _GPPort extends ffi.Struct {
  /// < \brief Actual type of this port
  @ffi.UnsignedInt()
  external int typeAsInt;

  GPPortType get type => GPPortType.fromValue(typeAsInt);

  /// < \brief Current port settings.
  external GPPortSettings settings;

  /// < \brief Settings to be committed.
  external GPPortSettings settings_pending;

  /// < \brief Port timeout in milliseconds.
  @ffi.Int()
  external int timeout;

  /// < \brief Camera driver private data pointer.
  external ffi.Pointer<GPPortPrivateLibrary> pl;

  /// < \brief Port library private data pointer.
  external ffi.Pointer<GPPortPrivateCore> pc;
}

/// \brief The GPhoto port structure.
///
/// This structure tracks the physical connection of the device.
/// It can correspond the various methods of lowlevel access, serial
/// usb and others and abstracts them as much as possible.
///
/// Frontends should consider this structure opaque and only use accessor
/// functions.
///
/// Camera drivers should only access the type and pl members directly,
/// and use accessor functions for the rest.
typedef GPPort = _GPPort;

/// \brief Serial pins.
///
/// A number of serial pins to trigger and pull. This is necessary
/// for some devices that have more than just the regular 3 or 4 wires.
enum _GPPin {
  /// < \brief RTS line
  GP_PIN_RTS(0),

  /// < \brief DTR line
  GP_PIN_DTR(1),

  /// < \brief CTS line
  GP_PIN_CTS(2),

  /// < \brief DSR line
  GP_PIN_DSR(3),

  /// < \brief Carrier Detect line
  GP_PIN_CD(4),

  /// < \brief RING (Modem) line
  GP_PIN_RING(5);

  final int value;
  const _GPPin(this.value);

  static _GPPin fromValue(int value) => switch (value) {
    0 => GP_PIN_RTS,
    1 => GP_PIN_DTR,
    2 => GP_PIN_CTS,
    3 => GP_PIN_DSR,
    4 => GP_PIN_CD,
    5 => GP_PIN_RING,
    _ => throw ArgumentError('Unknown value for _GPPin: $value'),
  };
}

/// \brief Level to pull specific lines.
///
/// The level on which to pull some of the serial lines.
enum _GPLevel {
  /// < \brief Pull to low (0V)
  GP_LEVEL_LOW(0),

  /// < \brief Pull to high (nV)
  GP_LEVEL_HIGH(1);

  final int value;
  const _GPLevel(this.value);

  static _GPLevel fromValue(int value) => switch (value) {
    0 => GP_LEVEL_LOW,
    1 => GP_LEVEL_HIGH,
    _ => throw ArgumentError('Unknown value for _GPLevel: $value'),
  };
}

/// \deprecated internal typedef
typedef gp_port = GPPort;

/// \deprecated internal typedef
typedef gp_port_settings = GPPortSettings;

/// \brief Logging level
/// Specifies the logging severity level.
enum GPLogLevel {
  /// < \brief Log message is an error information.
  GP_LOG_ERROR(0),

  /// < \brief Log message is an verbose debug information.
  GP_LOG_VERBOSE(1),

  /// < \brief Log message is an debug information.
  GP_LOG_DEBUG(2),

  /// < \brief Log message is a data hex dump.
  GP_LOG_DATA(3);

  final int value;
  const GPLogLevel(this.value);

  static GPLogLevel fromValue(int value) => switch (value) {
    0 => GP_LOG_ERROR,
    1 => GP_LOG_VERBOSE,
    2 => GP_LOG_DEBUG,
    3 => GP_LOG_DATA,
    _ => throw ArgumentError('Unknown value for GPLogLevel: $value'),
  };
}

typedef GPLogFuncFunction =
    ffi.Void Function(
      ffi.UnsignedInt level,
      ffi.Pointer<ffi.Char> domain,
      ffi.Pointer<ffi.Char> str,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartGPLogFuncFunction =
    void Function(
      GPLogLevel level,
      ffi.Pointer<ffi.Char> domain,
      ffi.Pointer<ffi.Char> str,
      ffi.Pointer<ffi.Void> data,
    );

/// \brief Logging function hook
///
/// This is the function frontends can use to receive logging information
/// from the libgphoto2 framework. It is set using gp_log_add_func() and
/// removed using gp_log_remove_func() and will then receive the logging
/// messages of the level specified.
///
/// \param level the log level of the passed message, as set by the camera driver or libgphoto2
/// \param domain the logging domain as set by the camera driver, or libgphoto2 function
/// \param str the logmessage, without linefeed
/// \param data the caller private data that was passed to gp_log_add_func()
typedef GPLogFunc = ffi.Pointer<ffi.NativeFunction<GPLogFuncFunction>>;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef __u_char = ffi.UnsignedChar;
typedef Dart__u_char = int;
typedef __u_short = ffi.UnsignedShort;
typedef Dart__u_short = int;
typedef __u_int = ffi.UnsignedInt;
typedef Dart__u_int = int;
typedef __u_long = ffi.UnsignedLong;
typedef Dart__u_long = int;
typedef __int8_t = ffi.SignedChar;
typedef Dart__int8_t = int;
typedef __uint8_t = ffi.UnsignedChar;
typedef Dart__uint8_t = int;
typedef __int16_t = ffi.Short;
typedef Dart__int16_t = int;
typedef __uint16_t = ffi.UnsignedShort;
typedef Dart__uint16_t = int;
typedef __int32_t = ffi.Int;
typedef Dart__int32_t = int;
typedef __uint32_t = ffi.UnsignedInt;
typedef Dart__uint32_t = int;
typedef __int64_t = ffi.Long;
typedef Dart__int64_t = int;
typedef __uint64_t = ffi.UnsignedLong;
typedef Dart__uint64_t = int;
typedef __int_least8_t = __int8_t;
typedef __uint_least8_t = __uint8_t;
typedef __int_least16_t = __int16_t;
typedef __uint_least16_t = __uint16_t;
typedef __int_least32_t = __int32_t;
typedef __uint_least32_t = __uint32_t;
typedef __int_least64_t = __int64_t;
typedef __uint_least64_t = __uint64_t;
typedef __quad_t = ffi.Long;
typedef Dart__quad_t = int;
typedef __u_quad_t = ffi.UnsignedLong;
typedef Dart__u_quad_t = int;
typedef __intmax_t = ffi.Long;
typedef Dart__intmax_t = int;
typedef __uintmax_t = ffi.UnsignedLong;
typedef Dart__uintmax_t = int;
typedef __dev_t = ffi.UnsignedLong;
typedef Dart__dev_t = int;
typedef __uid_t = ffi.UnsignedInt;
typedef Dart__uid_t = int;
typedef __gid_t = ffi.UnsignedInt;
typedef Dart__gid_t = int;
typedef __ino_t = ffi.UnsignedLong;
typedef Dart__ino_t = int;
typedef __ino64_t = ffi.UnsignedLong;
typedef Dart__ino64_t = int;
typedef __mode_t = ffi.UnsignedInt;
typedef Dart__mode_t = int;
typedef __nlink_t = ffi.UnsignedLong;
typedef Dart__nlink_t = int;
typedef __off_t = ffi.Long;
typedef Dart__off_t = int;
typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;
typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

typedef __clock_t = ffi.Long;
typedef Dart__clock_t = int;
typedef __rlim_t = ffi.UnsignedLong;
typedef Dart__rlim_t = int;
typedef __rlim64_t = ffi.UnsignedLong;
typedef Dart__rlim64_t = int;
typedef __id_t = ffi.UnsignedInt;
typedef Dart__id_t = int;
typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __useconds_t = ffi.UnsignedInt;
typedef Dart__useconds_t = int;
typedef __suseconds_t = ffi.Long;
typedef Dart__suseconds_t = int;
typedef __suseconds64_t = ffi.Long;
typedef Dart__suseconds64_t = int;
typedef __daddr_t = ffi.Int;
typedef Dart__daddr_t = int;
typedef __key_t = ffi.Int;
typedef Dart__key_t = int;
typedef __clockid_t = ffi.Int;
typedef Dart__clockid_t = int;
typedef __timer_t = ffi.Pointer<ffi.Void>;
typedef __blksize_t = ffi.Long;
typedef Dart__blksize_t = int;
typedef __blkcnt_t = ffi.Long;
typedef Dart__blkcnt_t = int;
typedef __blkcnt64_t = ffi.Long;
typedef Dart__blkcnt64_t = int;
typedef __fsblkcnt_t = ffi.UnsignedLong;
typedef Dart__fsblkcnt_t = int;
typedef __fsblkcnt64_t = ffi.UnsignedLong;
typedef Dart__fsblkcnt64_t = int;
typedef __fsfilcnt_t = ffi.UnsignedLong;
typedef Dart__fsfilcnt_t = int;
typedef __fsfilcnt64_t = ffi.UnsignedLong;
typedef Dart__fsfilcnt64_t = int;
typedef __fsword_t = ffi.Long;
typedef Dart__fsword_t = int;
typedef __ssize_t = ffi.Long;
typedef Dart__ssize_t = int;
typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;
typedef __syscall_ulong_t = ffi.UnsignedLong;
typedef Dart__syscall_ulong_t = int;
typedef __loff_t = __off64_t;
typedef __caddr_t = ffi.Pointer<ffi.Char>;
typedef __intptr_t = ffi.Long;
typedef Dart__intptr_t = int;
typedef __socklen_t = ffi.UnsignedInt;
typedef Dart__socklen_t = int;
typedef __sig_atomic_t = ffi.Int;
typedef Dart__sig_atomic_t = int;
typedef clock_t = __clock_t;
typedef time_t = __time_t;

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef clockid_t = __clockid_t;
typedef timer_t = __timer_t;

final class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

final class sigevent extends ffi.Opaque {}

typedef pid_t = __pid_t;

final class __locale_data extends ffi.Opaque {}

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

typedef __locale_t = ffi.Pointer<__locale_struct>;
typedef locale_t = __locale_t;
typedef int_least8_t = __int_least8_t;
typedef int_least16_t = __int_least16_t;
typedef int_least32_t = __int_least32_t;
typedef int_least64_t = __int_least64_t;
typedef uint_least8_t = __uint_least8_t;
typedef uint_least16_t = __uint_least16_t;
typedef uint_least32_t = __uint_least32_t;
typedef uint_least64_t = __uint_least64_t;
typedef int_fast8_t = ffi.SignedChar;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Long;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Long;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.Long;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.UnsignedChar;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.UnsignedLong;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.UnsignedLong;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.UnsignedLong;
typedef Dartuint_fast64_t = int;
typedef intmax_t = __intmax_t;
typedef uintmax_t = __uintmax_t;

/// \brief The type of view on the specified file.
///
/// Specifies the file of the current file, usually passed
/// to the gp_camera_file_get() and gp_camera_file_put()
/// functions. This is useful for multiple views of one
/// file, like that an single image file has "raw", "normal",
/// "exif" and "preview" views, or a media file has "normal"
/// and "metadata" file views.
enum CameraFileType {
  /// < A preview of an image.
  GP_FILE_TYPE_PREVIEW(0),

  /// < The regular normal data of a file.
  GP_FILE_TYPE_NORMAL(1),

  /// < The raw mode of a file, for instance the raw bayer data for cameras
  /// where postprocessing is done in the driver. The RAW files of modern
  /// DSLRs are GP_FILE_TYPE_NORMAL usually.
  GP_FILE_TYPE_RAW(2),

  /// < The audio view of a file. Perhaps an embedded comment or similar.
  GP_FILE_TYPE_AUDIO(3),

  /// < The embedded EXIF data of an image.
  GP_FILE_TYPE_EXIF(4),

  /// < The metadata of a file, like Metadata of files on MTP devices.
  GP_FILE_TYPE_METADATA(5);

  final int value;
  const CameraFileType(this.value);

  static CameraFileType fromValue(int value) => switch (value) {
    0 => GP_FILE_TYPE_PREVIEW,
    1 => GP_FILE_TYPE_NORMAL,
    2 => GP_FILE_TYPE_RAW,
    3 => GP_FILE_TYPE_AUDIO,
    4 => GP_FILE_TYPE_EXIF,
    5 => GP_FILE_TYPE_METADATA,
    _ => throw ArgumentError('Unknown value for CameraFileType: $value'),
  };
}

/// \brief File storage type.
///
/// The file storage type. Only used internally for now, but might
/// be exposed later on. See gp_file_new() and gp_file_new_from_fd().
enum CameraFileAccessType {
  /// < File is in system memory.
  GP_FILE_ACCESSTYPE_MEMORY(0),

  /// < File is associated with a UNIX filedescriptor.
  GP_FILE_ACCESSTYPE_FD(1),

  /// < File is associated with a programmatic handler.
  GP_FILE_ACCESSTYPE_HANDLER(2);

  final int value;
  const CameraFileAccessType(this.value);

  static CameraFileAccessType fromValue(int value) => switch (value) {
    0 => GP_FILE_ACCESSTYPE_MEMORY,
    1 => GP_FILE_ACCESSTYPE_FD,
    2 => GP_FILE_ACCESSTYPE_HANDLER,
    _ => throw ArgumentError('Unknown value for CameraFileAccessType: $value'),
  };
}

final class _CameraFileHandler extends ffi.Struct {
  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(ffi.Pointer<ffi.Void> priv, ffi.Pointer<ffi.Uint64> size)
    >
  >
  size;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Void> priv,
        ffi.Pointer<ffi.UnsignedChar> data,
        ffi.Pointer<ffi.Uint64> len,
      )
    >
  >
  read;

  external ffi.Pointer<
    ffi.NativeFunction<
      ffi.Int Function(
        ffi.Pointer<ffi.Void> priv,
        ffi.Pointer<ffi.UnsignedChar> data,
        ffi.Pointer<ffi.Uint64> len,
      )
    >
  >
  write;
}

typedef CameraFileHandler = _CameraFileHandler;

final class _CameraFile extends ffi.Opaque {}

/// ! \struct CameraFile
/// \brief File structure.
///
/// The internals of the CameraFile struct are private, please use
/// the accessor functions.
typedef CameraFile = _CameraFile;

final class _GPContext extends ffi.Opaque {}

/// \brief The gphoto context structure.
///
/// This structure allows callback handling, passing error contexts back,
/// progress handling and download cancellation and similar things.
/// It is usually passed around the functions.
typedef GPContext = _GPContext;

/// \brief Return codes that can be returned by progress handling.
///
/// An application can return special values back to the libgphoto2
/// progress callback handling functions. If "Cancel" is selected,
/// libgphoto2 and the camera driver will try to cancel transfer.
enum _GPContextFeedback {
  /// < Everything ok... proceed.
  GP_CONTEXT_FEEDBACK_OK(0),

  /// < Please cancel the current transfer if possible.
  GP_CONTEXT_FEEDBACK_CANCEL(1);

  final int value;
  const _GPContextFeedback(this.value);

  static _GPContextFeedback fromValue(int value) => switch (value) {
    0 => GP_CONTEXT_FEEDBACK_OK,
    1 => GP_CONTEXT_FEEDBACK_CANCEL,
    _ => throw ArgumentError('Unknown value for _GPContextFeedback: $value'),
  };
}

typedef GPContextIdleFuncFunction =
    ffi.Void Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartGPContextIdleFuncFunction =
    void Function(ffi.Pointer<GPContext> context, ffi.Pointer<ffi.Void> data);
typedef GPContextIdleFunc =
    ffi.Pointer<ffi.NativeFunction<GPContextIdleFuncFunction>>;
typedef GPContextErrorFuncFunction =
    ffi.Void Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Char> text,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartGPContextErrorFuncFunction =
    void Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Char> text,
      ffi.Pointer<ffi.Void> data,
    );
typedef GPContextErrorFunc =
    ffi.Pointer<ffi.NativeFunction<GPContextErrorFuncFunction>>;
typedef GPContextStatusFuncFunction =
    ffi.Void Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Char> text,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartGPContextStatusFuncFunction =
    void Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Char> text,
      ffi.Pointer<ffi.Void> data,
    );
typedef GPContextStatusFunc =
    ffi.Pointer<ffi.NativeFunction<GPContextStatusFuncFunction>>;
typedef GPContextMessageFuncFunction =
    ffi.Void Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Char> text,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartGPContextMessageFuncFunction =
    void Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Char> text,
      ffi.Pointer<ffi.Void> data,
    );
typedef GPContextMessageFunc =
    ffi.Pointer<ffi.NativeFunction<GPContextMessageFuncFunction>>;
typedef GPContextQuestionFuncFunction =
    ffi.UnsignedInt Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Char> text,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartGPContextQuestionFuncFunction =
    _GPContextFeedback Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Char> text,
      ffi.Pointer<ffi.Void> data,
    );
typedef GPContextQuestionFunc =
    ffi.Pointer<ffi.NativeFunction<GPContextQuestionFuncFunction>>;
typedef GPContextCancelFuncFunction =
    ffi.UnsignedInt Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartGPContextCancelFuncFunction =
    _GPContextFeedback Function(
      ffi.Pointer<GPContext> context,
      ffi.Pointer<ffi.Void> data,
    );
typedef GPContextCancelFunc =
    ffi.Pointer<ffi.NativeFunction<GPContextCancelFuncFunction>>;
typedef GPContextProgressStartFuncFunction =
    ffi.UnsignedInt Function(
      ffi.Pointer<GPContext> context,
      ffi.Float target,
      ffi.Pointer<ffi.Char> text,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartGPContextProgressStartFuncFunction =
    int Function(
      ffi.Pointer<GPContext> context,
      double target,
      ffi.Pointer<ffi.Char> text,
      ffi.Pointer<ffi.Void> data,
    );
typedef GPContextProgressStartFunc =
    ffi.Pointer<ffi.NativeFunction<GPContextProgressStartFuncFunction>>;
typedef GPContextProgressUpdateFuncFunction =
    ffi.Void Function(
      ffi.Pointer<GPContext> context,
      ffi.UnsignedInt id,
      ffi.Float current,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartGPContextProgressUpdateFuncFunction =
    void Function(
      ffi.Pointer<GPContext> context,
      int id,
      double current,
      ffi.Pointer<ffi.Void> data,
    );
typedef GPContextProgressUpdateFunc =
    ffi.Pointer<ffi.NativeFunction<GPContextProgressUpdateFuncFunction>>;
typedef GPContextProgressStopFuncFunction =
    ffi.Void Function(
      ffi.Pointer<GPContext> context,
      ffi.UnsignedInt id,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartGPContextProgressStopFuncFunction =
    void Function(
      ffi.Pointer<GPContext> context,
      int id,
      ffi.Pointer<ffi.Void> data,
    );
typedef GPContextProgressStopFunc =
    ffi.Pointer<ffi.NativeFunction<GPContextProgressStopFuncFunction>>;

final class _CameraList extends ffi.Opaque {}

/// \brief A generic list
///
/// This structure provides a list with \a name:value pairs that is used in various
/// parts of libgphoto2. Its details are internal, please use the
/// gp_list_xxx accessor functions.
///
/// Usage pattern for CameraList for users external of
/// libgphoto2, such as libgphoto2 frontends:
///
/// \code
/// CameraList *list;
/// gp_list_new (&list);
/// init_list_somehow (list);
/// for (i=0; i < gp_list_count(list); i++) {
/// char *name, *value;
/// gp_list_get_name (list, i, &name);
/// gp_list_get_name (list, i, &value);
/// do_something_with (name, value);
/// }
/// gp_list_free (list);
/// \endcode
///
/// Please do NOT directly instantiate a CameraList object like this:
/// \code
/// CameraList foo;     // DO NOT DO THIS
/// \endcode
///
/// Please do NOT directly access the structure members like this:
/// \code
/// list->entry[i].name // DO NOT DO THIS
/// \endcode
typedef CameraList = _CameraList;

/// Current implementation status of the camera driver.
enum CameraDriverStatus {
  /// < Driver is production ready.
  GP_DRIVER_STATUS_PRODUCTION(0),

  /// < Driver is beta quality.
  GP_DRIVER_STATUS_TESTING(1),

  /// < Driver is alpha quality and might even not work.
  GP_DRIVER_STATUS_EXPERIMENTAL(2),

  /// < Driver is no longer recommended to use and will be removed.
  GP_DRIVER_STATUS_DEPRECATED(3);

  final int value;
  const CameraDriverStatus(this.value);

  static CameraDriverStatus fromValue(int value) => switch (value) {
    0 => GP_DRIVER_STATUS_PRODUCTION,
    1 => GP_DRIVER_STATUS_TESTING,
    2 => GP_DRIVER_STATUS_EXPERIMENTAL,
    3 => GP_DRIVER_STATUS_DEPRECATED,
    _ => throw ArgumentError('Unknown value for CameraDriverStatus: $value'),
  };
}

/// Type of the device represented. Currently we have Still Cameras
/// and MTP Audio Players.
enum GphotoDeviceType {
  /// < Traditional still camera
  GP_DEVICE_STILL_CAMERA(0),

  /// < Audio player
  GP_DEVICE_AUDIO_PLAYER(1);

  final int value;
  const GphotoDeviceType(this.value);

  static GphotoDeviceType fromValue(int value) => switch (value) {
    0 => GP_DEVICE_STILL_CAMERA,
    1 => GP_DEVICE_AUDIO_PLAYER,
    _ => throw ArgumentError('Unknown value for GphotoDeviceType: $value'),
  };
}

/// A bitmask of remote control related operations of the device.
/// Some drivers might support additional dynamic capabilities (like the PTP driver).
enum CameraOperation {
  /// < No remote control operation supported.
  GP_OPERATION_NONE(0),

  /// < Capturing images supported.
  GP_OPERATION_CAPTURE_IMAGE(1),

  /// < Capturing videos supported.
  GP_OPERATION_CAPTURE_VIDEO(2),

  /// < Capturing audio supported.
  GP_OPERATION_CAPTURE_AUDIO(4),

  /// < Capturing image previews supported.
  GP_OPERATION_CAPTURE_PREVIEW(8),

  /// < Camera and Driver configuration supported.
  GP_OPERATION_CONFIG(16),

  /// < Camera can trigger capture and wait for events.
  GP_OPERATION_TRIGGER_CAPTURE(32);

  final int value;
  const CameraOperation(this.value);

  static CameraOperation fromValue(int value) => switch (value) {
    0 => GP_OPERATION_NONE,
    1 => GP_OPERATION_CAPTURE_IMAGE,
    2 => GP_OPERATION_CAPTURE_VIDEO,
    4 => GP_OPERATION_CAPTURE_AUDIO,
    8 => GP_OPERATION_CAPTURE_PREVIEW,
    16 => GP_OPERATION_CONFIG,
    32 => GP_OPERATION_TRIGGER_CAPTURE,
    _ => throw ArgumentError('Unknown value for CameraOperation: $value'),
  };
}

/// A bitmask of image related operations of the device.
enum CameraFileOperation {
  /// < No special file operations, just download.
  GP_FILE_OPERATION_NONE(0),

  /// < Deletion of files is possible.
  GP_FILE_OPERATION_DELETE(2),

  /// < Previewing viewfinder content is possible.
  GP_FILE_OPERATION_PREVIEW(8),

  /// < Raw retrieval is possible (used by non-JPEG cameras)
  GP_FILE_OPERATION_RAW(16),

  /// < Audio retrieval is possible.
  GP_FILE_OPERATION_AUDIO(32),

  /// < EXIF retrieval is possible.
  GP_FILE_OPERATION_EXIF(64);

  final int value;
  const CameraFileOperation(this.value);

  static CameraFileOperation fromValue(int value) => switch (value) {
    0 => GP_FILE_OPERATION_NONE,
    2 => GP_FILE_OPERATION_DELETE,
    8 => GP_FILE_OPERATION_PREVIEW,
    16 => GP_FILE_OPERATION_RAW,
    32 => GP_FILE_OPERATION_AUDIO,
    64 => GP_FILE_OPERATION_EXIF,
    _ => throw ArgumentError('Unknown value for CameraFileOperation: $value'),
  };
}

/// A bitmask of filesystem related operations of the device.
enum CameraFolderOperation {
  /// < No special filesystem operation.
  GP_FOLDER_OPERATION_NONE(0),

  /// < Deletion of all files on the device.
  GP_FOLDER_OPERATION_DELETE_ALL(1),

  /// < Upload of files to the device possible.
  GP_FOLDER_OPERATION_PUT_FILE(2),

  /// < Making directories on the device possible.
  GP_FOLDER_OPERATION_MAKE_DIR(4),

  /// < Removing directories from the device possible.
  GP_FOLDER_OPERATION_REMOVE_DIR(8);

  final int value;
  const CameraFolderOperation(this.value);

  static CameraFolderOperation fromValue(int value) => switch (value) {
    0 => GP_FOLDER_OPERATION_NONE,
    1 => GP_FOLDER_OPERATION_DELETE_ALL,
    2 => GP_FOLDER_OPERATION_PUT_FILE,
    4 => GP_FOLDER_OPERATION_MAKE_DIR,
    8 => GP_FOLDER_OPERATION_REMOVE_DIR,
    _ => throw ArgumentError('Unknown value for CameraFolderOperation: $value'),
  };
}

/// \brief Describes the properties of a specific camera.
///
/// The internals of this structures are used extensively by the
/// camlibs, but the status regarding use by frontends is questionable.
final class CameraAbilities extends ffi.Struct {
  /// < \brief name of camera model
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> model;

  /// < \brief driver quality
  @ffi.UnsignedInt()
  external int statusAsInt;

  CameraDriverStatus get status => CameraDriverStatus.fromValue(statusAsInt);

  /// \brief Supported port types.
  @ffi.UnsignedInt()
  external int portAsInt;

  GPPortType get port => GPPortType.fromValue(portAsInt);

  /// \brief Supported serial port speeds (terminated with a value of 0).
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Int> speed;

  /// < \brief Camera operation funcs
  @ffi.UnsignedInt()
  external int operationsAsInt;

  CameraOperation get operations => CameraOperation.fromValue(operationsAsInt);

  /// < \brief Camera file op funcs
  @ffi.UnsignedInt()
  external int file_operationsAsInt;

  CameraFileOperation get file_operations =>
      CameraFileOperation.fromValue(file_operationsAsInt);

  /// < \brief Camera folder op funcs
  @ffi.UnsignedInt()
  external int folder_operationsAsInt;

  CameraFolderOperation get folder_operations =>
      CameraFolderOperation.fromValue(folder_operationsAsInt);

  /// < \brief USB Vendor D
  @ffi.Int()
  external int usb_vendor;

  /// < \brief USB Product ID
  @ffi.Int()
  external int usb_product;

  /// < \brief USB device class
  @ffi.Int()
  external int usb_class;

  /// < \brief USB device subclass
  @ffi.Int()
  external int usb_subclass;

  /// < \brief USB device protocol
  @ffi.Int()
  external int usb_protocol;

  /// < \brief (Internal) library filename
  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> library$;

  /// < \brief (Internal) camera ID name
  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> id;

  /// < \brief Device type.
  @ffi.UnsignedInt()
  external int device_typeAsInt;

  GphotoDeviceType get device_type =>
      GphotoDeviceType.fromValue(device_typeAsInt);

  /// < reserved space \internal
  @ffi.Int()
  external int reserved2;

  /// < reserved space \internal
  @ffi.Int()
  external int reserved3;

  /// < reserved space \internal
  @ffi.Int()
  external int reserved4;

  /// < reserved space \internal
  @ffi.Int()
  external int reserved5;

  /// < reserved space \internal
  @ffi.Int()
  external int reserved6;

  /// < reserved space \internal
  @ffi.Int()
  external int reserved7;

  /// < reserved space \internal
  @ffi.Int()
  external int reserved8;
}

final class _CameraAbilitiesList extends ffi.Opaque {}

/// \brief List of supported camera models including their abilities
///
/// The internals of this list are hidden - use the access functions.
typedef CameraAbilitiesList = _CameraAbilitiesList;

final class _CameraFilesystem extends ffi.Opaque {}

/// \brief Filesystem structure, only exposed to camera drivers.
///
/// Internal structure, contents not exposed to frontends. Camera
/// drivers get these passed to filesystem related functions and
/// are supposed to use it only via the accessor functions.
typedef CameraFilesystem = _CameraFilesystem;

/// \brief Object representing a camera attached to the system.
///
/// A Camera object represents a specific instance of a (physical of
/// virtual) camera attached to the system.
///
/// The abilities of this type of camera are stored in a CameraAbility
/// object.
///
/// The details of the Camera object are internal.
typedef Camera = _Camera;
typedef CameraPrePostFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraPrePostFuncFunction =
    int Function(ffi.Pointer<Camera> camera, ffi.Pointer<GPContext> context);

/// \param camera a \ref Camera object
/// \param context a \ref GPContext object
/// \return a gphoto2 error code
///
/// Implement this function in the camera driver if the camera needs to
/// be initialized before or reset the after each access from
/// libgphoto2.
///
/// For example, you would probably set the speed to the highest one
/// right before downloading an image, and reset it to the default speed
/// afterwards so that other programs will not be affected by this speed
/// change.
typedef CameraPrePostFunc =
    ffi.Pointer<ffi.NativeFunction<CameraPrePostFuncFunction>>;
typedef CameraExitFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraExitFuncFunction =
    int Function(ffi.Pointer<Camera> camera, ffi.Pointer<GPContext> context);

/// \name Camera object member functions
///
/// These functions must be implemented by a camlib and the camlib's
/// camera_init() function will add them to a Camera object.
///
/// @{
/// /
/// /**
/// \brief The camera exit function
///
/// \param camera the current camera
/// \param context a #GPContext
///
/// This functions is called in the camera driver for closing the camera
/// connection. It should do the necessary cleanups of the internal camera
/// state, free allocated private structures and similar.
///
/// The driver does not need to close the #GPPort, this is done by libgphoto2
/// itself.
///
/// Implement this function if you need to any of this stuff, otherwise leave
/// it out.
///
/// \returns a gphoto error code
typedef CameraExitFunc =
    ffi.Pointer<ffi.NativeFunction<CameraExitFuncFunction>>;

final class _CameraWidget extends ffi.Opaque {}

/// \brief internal structure please use the accessors.
typedef CameraWidget = _CameraWidget;
typedef CameraGetConfigFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<ffi.Pointer<CameraWidget>> widget,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraGetConfigFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<ffi.Pointer<CameraWidget>> widget,
      ffi.Pointer<GPContext> context,
    );

/// \brief Get a configuration tree for the camera and its driver
///
/// \param camera the current camera
/// \param widget pointer to store the toplevel widget of the tree
/// \param context the active #GPContext
///
/// A camera driver can support configuration of either its own behaviour
/// or the camera device itself. To allow a flexible driver framework,
/// the camera driver provides a generic configuration widget tree to the
/// frontend, which then renders it, allows user input and sends it back
/// via the #CameraSetConfigFunc function to have the driver configure itself
/// or the camera.
///
/// If you do not have configuration ability, there is no need to specify this
/// function.
///
/// \returns a gphoto error code
typedef CameraGetConfigFunc =
    ffi.Pointer<ffi.NativeFunction<CameraGetConfigFuncFunction>>;
typedef CameraSetConfigFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraWidget> widget,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraSetConfigFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraWidget> widget,
      ffi.Pointer<GPContext> context,
    );

/// \brief Set the configuration in the camera
///
/// \param camera the current camera
/// \param widget the configuration widget tree that was changed
/// \param context the active #GPContext
///
/// This function is called in the driver after the configuration is set.
/// It is called directly after setting the value and might called multiple
/// times (or never) after just one #CameraGetConfigFunc.
///
/// \returns a gphoto error code
typedef CameraSetConfigFunc =
    ffi.Pointer<ffi.NativeFunction<CameraSetConfigFuncFunction>>;
typedef CameraListConfigFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraList> list,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraListConfigFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraList> list,
      ffi.Pointer<GPContext> context,
    );

/// \brief List all configuration widgets for a specific configuration
///
/// \param camera the current camera
/// \param list the list of widgets available
/// \param context the active #GPContext
///
/// A camera driver can support configuration of either its own behaviour
/// or the camera device itself. To allow a flexible driver framework,
/// the camera driver provides a generic configuration widget tree to the
/// frontend, which then renders it, allows user input and sends it back
/// via the #CameraSetConfigFunc function to have the driver configure itself
/// or the camera.
///
/// This specific function retrieves all the available configuration values in a flat list.
///
/// This is different than the GetConfigFunc, which returns a configuration tree.
///
/// If you do not have configuration ability, there is no need to specify this
/// function.
///
/// \returns a gphoto error code
typedef CameraListConfigFunc =
    ffi.Pointer<ffi.NativeFunction<CameraListConfigFuncFunction>>;
typedef CameraGetSingleConfigFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<ffi.Pointer<CameraWidget>> widget,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraGetSingleConfigFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<ffi.Pointer<CameraWidget>> widget,
      ffi.Pointer<GPContext> context,
    );

/// \brief Get a configuration widget for a specific configuration
///
/// \param camera the current camera
/// \param name the name of the widget
/// \param widget pointer to store the toplevel widget of the tree
/// \param context the active #GPContext
///
/// A camera driver can support configuration of either its own behaviour
/// or the camera device itself. To allow a flexible driver framework,
/// the camera driver provides a generic configuration widget tree to the
/// frontend, which then renders it, allows user input and sends it back
/// via the #CameraSetConfigFunc function to have the driver configure itself
/// or the camera.
///
/// This specific function retrieves one specific named entry, and not the full
/// tree to allow for querying specific settings faster.
///
/// If you do not have configuration ability, there is no need to specify this
/// function.
///
/// \returns a gphoto error code
typedef CameraGetSingleConfigFunc =
    ffi.Pointer<ffi.NativeFunction<CameraGetSingleConfigFuncFunction>>;
typedef CameraSetSingleConfigFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<CameraWidget> widget,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraSetSingleConfigFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<CameraWidget> widget,
      ffi.Pointer<GPContext> context,
    );

/// \brief Set a single configuration variable in the camera
///
/// \param camera the current camera
/// \param name the widget to set
/// \param widget the configuration widget tree that was changed
/// \param context the active #GPContext
///
/// This function is called in the driver after the configuration value is set.
///
/// \returns a gphoto error code
typedef CameraSetSingleConfigFunc =
    ffi.Pointer<ffi.NativeFunction<CameraSetSingleConfigFuncFunction>>;

/// \brief Type of the capture to do.
///
/// Specifies the type of capture the user wants to do with the
/// gp_camera_capture() function.
enum CameraCaptureType {
  /// < \brief Capture an image.
  GP_CAPTURE_IMAGE(0),

  /// < \brief Capture a movie.
  GP_CAPTURE_MOVIE(1),

  /// < \brief Capture audio.
  GP_CAPTURE_SOUND(2);

  final int value;
  const CameraCaptureType(this.value);

  static CameraCaptureType fromValue(int value) => switch (value) {
    0 => GP_CAPTURE_IMAGE,
    1 => GP_CAPTURE_MOVIE,
    2 => GP_CAPTURE_SOUND,
    _ => throw ArgumentError('Unknown value for CameraCaptureType: $value'),
  };
}

/// \brief A structure created by the capture operation.
///
/// A structure containing the folder and filename of an object
/// after a successful capture and is passed as reference to the
/// gp_camera_capture() function.
final class CameraFilePath extends ffi.Struct {
  /// < \brief Name of the captured file.
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> name;

  /// < \brief Name of the folder of the captured file.
  @ffi.Array.multi([1024])
  external ffi.Array<ffi.Char> folder;
}

typedef CameraCaptureFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.UnsignedInt type,
      ffi.Pointer<CameraFilePath> path,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraCaptureFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      CameraCaptureType type,
      ffi.Pointer<CameraFilePath> path,
      ffi.Pointer<GPContext> context,
    );
typedef CameraCaptureFunc =
    ffi.Pointer<ffi.NativeFunction<CameraCaptureFuncFunction>>;
typedef CameraTriggerCaptureFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraTriggerCaptureFuncFunction =
    int Function(ffi.Pointer<Camera> camera, ffi.Pointer<GPContext> context);
typedef CameraTriggerCaptureFunc =
    ffi.Pointer<ffi.NativeFunction<CameraTriggerCaptureFuncFunction>>;
typedef CameraCapturePreviewFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraFile> file,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraCapturePreviewFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraFile> file,
      ffi.Pointer<GPContext> context,
    );
typedef CameraCapturePreviewFunc =
    ffi.Pointer<ffi.NativeFunction<CameraCapturePreviewFuncFunction>>;

/// \brief CameraText structure used in various functions.
///
/// A text structure containing translated text returned
/// by various functions (about, manual, summary). You should
/// not assume a size.
final class CameraText extends ffi.Struct {
  /// < \brief Character string containing the translated text.
  @ffi.Array.multi([32768])
  external ffi.Array<ffi.Char> text;
}

typedef CameraSummaryFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraText> text,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraSummaryFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraText> text,
      ffi.Pointer<GPContext> context,
    );
typedef CameraSummaryFunc =
    ffi.Pointer<ffi.NativeFunction<CameraSummaryFuncFunction>>;
typedef CameraManualFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraText> text,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraManualFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraText> text,
      ffi.Pointer<GPContext> context,
    );
typedef CameraManualFunc =
    ffi.Pointer<ffi.NativeFunction<CameraManualFuncFunction>>;
typedef CameraAboutFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraText> text,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraAboutFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<CameraText> text,
      ffi.Pointer<GPContext> context,
    );
typedef CameraAboutFunc =
    ffi.Pointer<ffi.NativeFunction<CameraAboutFuncFunction>>;

/// \brief Specify what event we received from the camera.
///
/// Used by gp_camera_wait_for_event() to specify what
/// event happened on the camera.
enum CameraEventType {
  /// < unknown and unhandled event. argument is a char* or NULL
  GP_EVENT_UNKNOWN(0),

  /// < timeout, no arguments
  GP_EVENT_TIMEOUT(1),

  /// < CameraFilePath* = file path on camfs
  GP_EVENT_FILE_ADDED(2),

  /// < CameraFilePath* = folder on camfs
  GP_EVENT_FOLDER_ADDED(3),

  /// < last capture is complete
  GP_EVENT_CAPTURE_COMPLETE(4),

  /// < CameraFilePath* = file path on camfs
  GP_EVENT_FILE_CHANGED(5);

  final int value;
  const CameraEventType(this.value);

  static CameraEventType fromValue(int value) => switch (value) {
    0 => GP_EVENT_UNKNOWN,
    1 => GP_EVENT_TIMEOUT,
    2 => GP_EVENT_FILE_ADDED,
    3 => GP_EVENT_FOLDER_ADDED,
    4 => GP_EVENT_CAPTURE_COMPLETE,
    5 => GP_EVENT_FILE_CHANGED,
    _ => throw ArgumentError('Unknown value for CameraEventType: $value'),
  };
}

typedef CameraWaitForEventFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Int timeout,
      ffi.Pointer<ffi.UnsignedInt> eventtype,
      ffi.Pointer<ffi.Pointer<ffi.Void>> eventdata,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraWaitForEventFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      int timeout,
      ffi.Pointer<ffi.UnsignedInt> eventtype,
      ffi.Pointer<ffi.Pointer<ffi.Void>> eventdata,
      ffi.Pointer<GPContext> context,
    );
typedef CameraWaitForEvent =
    ffi.Pointer<ffi.NativeFunction<CameraWaitForEventFunction>>;

/// \brief Various camera specific functions.
///
/// This structure contains various pointers to functions that apply to
/// the camera itself, and not the filesystem (which is handled by the
/// filesystem functions). Set the ones you want to provide, leave the rest
/// unset.
///
/// This structure should only used by the driver itself, the frontend
/// should use the gp_camera_xxx wrapper functions for it, who handle
/// opening and locking around those hooks.
final class _CameraFunctions extends ffi.Struct {
  /// < \brief Function called before each camera operation.
  external CameraPrePostFunc pre_func;

  /// < \brief Function called after each camera operation.
  external CameraPrePostFunc post_func;

  /// < \brief Function called on closing the camera.
  external CameraExitFunc exit;

  /// < \brief Called for requesting the configuration widgets.
  external CameraGetConfigFunc get_config;

  /// < \brief Called after a configuration was changed
  external CameraSetConfigFunc set_config;

  /// < \brief Called for listing the available configuration widgets.
  external CameraListConfigFunc list_config;

  /// < \brief Called for requesteing a single widget.
  external CameraGetSingleConfigFunc get_single_config;

  /// < \brief Called for setting a single configuration widget.
  external CameraSetSingleConfigFunc set_single_config;

  /// < \brief Remote control the camera to capture
  external CameraCaptureFunc capture;

  /// < \brief Remote control the camera to trigger capture
  external CameraTriggerCaptureFunc trigger_capture;

  /// < \brief Preview viewfinder content.
  external CameraCapturePreviewFunc capture_preview;

  /// < \brief Give a summary about the current camera status, translated.
  external CameraSummaryFunc summary;

  /// < \brief Give a brief manual about any specific items a user has to know, translated.
  external CameraManualFunc manual;

  /// < \brief A little About text, including authors and credits.
  external CameraAboutFunc about;

  /// < \brief Wait for a specific event from the camera
  external CameraWaitForEvent wait_for_event;

  /// < \brief reserved for future use
  external ffi.Pointer<ffi.Void> reserved1;

  /// < \brief reserved for future use
  external ffi.Pointer<ffi.Void> reserved2;

  /// < \brief reserved for future use
  external ffi.Pointer<ffi.Void> reserved3;

  /// < \brief reserved for future use
  external ffi.Pointer<ffi.Void> reserved4;

  /// < \brief reserved for future use
  external ffi.Pointer<ffi.Void> reserved5;

  /// < \brief reserved for future use
  external ffi.Pointer<ffi.Void> reserved6;

  /// < \brief reserved for future use
  external ffi.Pointer<ffi.Void> reserved7;

  /// < \brief reserved for future use
  external ffi.Pointer<ffi.Void> reserved8;
}

/// \brief Various camera specific functions.
///
/// This structure contains various pointers to functions that apply to
/// the camera itself, and not the filesystem (which is handled by the
/// filesystem functions). Set the ones you want to provide, leave the rest
/// unset.
///
/// This structure should only used by the driver itself, the frontend
/// should use the gp_camera_xxx wrapper functions for it, who handle
/// opening and locking around those hooks.
typedef CameraFunctions = _CameraFunctions;

final class _CameraPrivateLibrary extends ffi.Opaque {}

typedef CameraPrivateLibrary = _CameraPrivateLibrary;

final class _CameraPrivateCore extends ffi.Opaque {}

typedef CameraPrivateCore = _CameraPrivateCore;

final class _Camera extends ffi.Struct {
  /// \name Those should be accessed only by the camera driver.
  /// @{
  external ffi.Pointer<GPPort> port;

  external ffi.Pointer<CameraFilesystem> fs;

  external ffi.Pointer<CameraFunctions> functions;

  /// < Private data of camera libraries.
  external ffi.Pointer<CameraPrivateLibrary> pl;

  /// < Private data of the core of gphoto2.
  external ffi.Pointer<CameraPrivateCore> pc;
}

/// \brief Type of the widget to be created.
///
/// The actual widget type we want to create. The type of the value
/// it supports depends on this type.
enum CameraWidgetType {
  /// < \brief Window widget
  /// This is the toplevel configuration widget. It should likely contain multiple #GP_WIDGET_SECTION entries.
  GP_WIDGET_WINDOW(0),

  /// < \brief Section widget (think Tab)
  GP_WIDGET_SECTION(1),

  /// < \brief Text widget.
  GP_WIDGET_TEXT(2),

  /// < \brief Slider widget.
  GP_WIDGET_RANGE(3),

  /// < \brief Toggle widget (think check box)
  GP_WIDGET_TOGGLE(4),

  /// < \brief Radio button widget.
  GP_WIDGET_RADIO(5),

  /// < \brief Menu widget (same as RADIO).
  GP_WIDGET_MENU(6),

  /// < \brief Button press widget.
  GP_WIDGET_BUTTON(7),

  /// < \brief Date entering widget.
  GP_WIDGET_DATE(8);

  final int value;
  const CameraWidgetType(this.value);

  static CameraWidgetType fromValue(int value) => switch (value) {
    0 => GP_WIDGET_WINDOW,
    1 => GP_WIDGET_SECTION,
    2 => GP_WIDGET_TEXT,
    3 => GP_WIDGET_RANGE,
    4 => GP_WIDGET_TOGGLE,
    5 => GP_WIDGET_RADIO,
    6 => GP_WIDGET_MENU,
    7 => GP_WIDGET_BUTTON,
    8 => GP_WIDGET_DATE,
    _ => throw ArgumentError('Unknown value for CameraWidgetType: $value'),
  };
}

typedef CameraWidgetCallbackFunction =
    ffi.Int Function(
      ffi.Pointer<Camera>,
      ffi.Pointer<CameraWidget>,
      ffi.Pointer<GPContext>,
    );
typedef DartCameraWidgetCallbackFunction =
    int Function(
      ffi.Pointer<Camera>,
      ffi.Pointer<CameraWidget>,
      ffi.Pointer<GPContext>,
    );

/// \brief Callback handler for Button widgets.
typedef CameraWidgetCallback =
    ffi.Pointer<ffi.NativeFunction<CameraWidgetCallbackFunction>>;

/// \brief Bitmask on what fields are set in the CameraFileInfo structure.
///
/// Bitmask to mark up which fields are set in the CameraFileInfo
/// structure. The other fields might be uninitialized.
/// If you set information via gp_camera_file_set_info() you
/// need to set those flags. If you retrieve information via
/// gp_camera_file_get_info() you need to check those flags.
/// They are separate for both "normal" and "preview" parts
/// and are mostly image related.
enum CameraFileInfoFields {
  /// < \brief No fields set.
  GP_FILE_INFO_NONE(0),

  /// < \brief The MIME type is set.
  GP_FILE_INFO_TYPE(1),

  /// < \brief The filesize is set.
  GP_FILE_INFO_SIZE(4),

  /// < \brief The width is set.
  GP_FILE_INFO_WIDTH(8),

  /// < \brief The height is set.
  GP_FILE_INFO_HEIGHT(16),

  /// < \brief The access permissions are set.
  GP_FILE_INFO_PERMISSIONS(32),

  /// < \brief The status is set (downloaded).
  GP_FILE_INFO_STATUS(64),

  /// < \brief The modification time is set.
  GP_FILE_INFO_MTIME(128),

  /// < \brief All possible fields set. Internal.
  GP_FILE_INFO_ALL(255);

  final int value;
  const CameraFileInfoFields(this.value);

  static CameraFileInfoFields fromValue(int value) => switch (value) {
    0 => GP_FILE_INFO_NONE,
    1 => GP_FILE_INFO_TYPE,
    4 => GP_FILE_INFO_SIZE,
    8 => GP_FILE_INFO_WIDTH,
    16 => GP_FILE_INFO_HEIGHT,
    32 => GP_FILE_INFO_PERMISSIONS,
    64 => GP_FILE_INFO_STATUS,
    128 => GP_FILE_INFO_MTIME,
    255 => GP_FILE_INFO_ALL,
    _ => throw ArgumentError('Unknown value for CameraFileInfoFields: $value'),
  };
}

/// \brief Bitmask containing the file permission flags.
///
/// Possible flag values of the permission entry in the file information.
enum CameraFilePermissions {
  /// < \brief No permissions.
  GP_FILE_PERM_NONE(0),

  /// < \brief Read permissions.
  GP_FILE_PERM_READ(1),

  /// < \brief Write permissions
  GP_FILE_PERM_DELETE(2),

  /// < \brief Internal.
  GP_FILE_PERM_ALL(255);

  final int value;
  const CameraFilePermissions(this.value);

  static CameraFilePermissions fromValue(int value) => switch (value) {
    0 => GP_FILE_PERM_NONE,
    1 => GP_FILE_PERM_READ,
    2 => GP_FILE_PERM_DELETE,
    255 => GP_FILE_PERM_ALL,
    _ => throw ArgumentError('Unknown value for CameraFilePermissions: $value'),
  };
}

/// \brief Possible status values.
///
/// Bitmask of possible stati. Currently only download is supported.
enum CameraFileStatus {
  /// < File is not downloaded.
  GP_FILE_STATUS_NOT_DOWNLOADED(0),

  /// < File is already downloaded.
  GP_FILE_STATUS_DOWNLOADED(1);

  final int value;
  const CameraFileStatus(this.value);

  static CameraFileStatus fromValue(int value) => switch (value) {
    0 => GP_FILE_STATUS_NOT_DOWNLOADED,
    1 => GP_FILE_STATUS_DOWNLOADED,
    _ => throw ArgumentError('Unknown value for CameraFileStatus: $value'),
  };
}

/// \brief File information of a regular file.
///
/// Contains information a regular file with fields being
/// set depending on the bitmask in the fields member.
final class _CameraFileInfoFile extends ffi.Struct {
  /// < \brief Bitmask containing the set members.
  @ffi.UnsignedInt()
  external int fieldsAsInt;

  CameraFileInfoFields get fields =>
      CameraFileInfoFields.fromValue(fieldsAsInt);

  /// < \brief Status of the file.
  @ffi.UnsignedInt()
  external int statusAsInt;

  CameraFileStatus get status => CameraFileStatus.fromValue(statusAsInt);

  /// < \brief Size of the file.
  @ffi.Uint64()
  external int size;

  /// < \brief MIME type of the file.
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> type;

  /// < \brief Height of the file.
  @ffi.Uint32()
  external int width;

  /// < \brief Width of the file.
  @ffi.Uint32()
  external int height;

  /// < \brief Permissions of the file.
  @ffi.UnsignedInt()
  external int permissionsAsInt;

  CameraFilePermissions get permissions =>
      CameraFilePermissions.fromValue(permissionsAsInt);

  /// < \brief Modification time of the file.
  @time_t()
  external int mtime;
}

/// \brief File information of a regular file.
///
/// Contains information a regular file with fields being
/// set depending on the bitmask in the fields member.
typedef CameraFileInfoFile = _CameraFileInfoFile;

/// \brief File information of a preview file.
///
/// Contains information of a preview file with fields being
/// set depending on the bitmask in the fields member.
final class _CameraFileInfoPreview extends ffi.Struct {
  /// < \brief Bitmask containing the set members.
  @ffi.UnsignedInt()
  external int fieldsAsInt;

  CameraFileInfoFields get fields =>
      CameraFileInfoFields.fromValue(fieldsAsInt);

  /// < \brief Status of the preview.
  @ffi.UnsignedInt()
  external int statusAsInt;

  CameraFileStatus get status => CameraFileStatus.fromValue(statusAsInt);

  /// < \brief Size of the preview.
  @ffi.Uint64()
  external int size;

  /// < \brief MIME type of the preview.
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> type;

  /// < \brief Width of the preview.
  @ffi.Uint32()
  external int width;

  /// < \brief Height of the preview.
  @ffi.Uint32()
  external int height;
}

/// \brief File information of a preview file.
///
/// Contains information of a preview file with fields being
/// set depending on the bitmask in the fields member.
typedef CameraFileInfoPreview = _CameraFileInfoPreview;

/// \brief File information of an audio file.
///
/// Contains information of an audio file with fields being
/// set depending on the bitmask in the fields member.
final class _CameraFileInfoAudio extends ffi.Struct {
  /// < \brief Bitmask containing the set members.
  @ffi.UnsignedInt()
  external int fieldsAsInt;

  CameraFileInfoFields get fields =>
      CameraFileInfoFields.fromValue(fieldsAsInt);

  /// < \brief Status of the preview file.
  @ffi.UnsignedInt()
  external int statusAsInt;

  CameraFileStatus get status => CameraFileStatus.fromValue(statusAsInt);

  /// < \brief Size of the audio file.
  @ffi.Uint64()
  external int size;

  /// < \brief MIME type of the audio file.
  @ffi.Array.multi([64])
  external ffi.Array<ffi.Char> type;
}

/// \brief File information of an audio file.
///
/// Contains information of an audio file with fields being
/// set depending on the bitmask in the fields member.
typedef CameraFileInfoAudio = _CameraFileInfoAudio;

/// \brief File information structure.
///
/// Contains the normal, preview and audio file information structures
/// for a specific file.
final class _CameraFileInfo extends ffi.Struct {
  external CameraFileInfoPreview preview;

  external CameraFileInfoFile file;

  external CameraFileInfoAudio audio;
}

/// \brief File information structure.
///
/// Contains the normal, preview and audio file information structures
/// for a specific file.
typedef CameraFileInfo = _CameraFileInfo;

/// \brief Storage information flags.
///
/// Bitmask to specify which entries of the filesystem
/// storage information is set.
enum CameraStorageInfoFields {
  /// < \brief The base directory.
  /// Usually / if just 1 storage is attached.
  GP_STORAGEINFO_BASE(1),

  /// < \brief Label of the filesystem.
  /// Could also be a DOS label.
  GP_STORAGEINFO_LABEL(2),

  /// < \brief More verbose description.
  GP_STORAGEINFO_DESCRIPTION(4),

  /// < \brief Access permissions.
  GP_STORAGEINFO_ACCESS(8),

  /// < \brief Hardware type.
  GP_STORAGEINFO_STORAGETYPE(16),

  /// < \brief Filesystem type.
  GP_STORAGEINFO_FILESYSTEMTYPE(32),

  /// < \brief Maximum capacity in kbytes
  GP_STORAGEINFO_MAXCAPACITY(64),

  /// < \brief Free space in kbytes.
  GP_STORAGEINFO_FREESPACEKBYTES(128),

  /// < \brief Free space in images.
  GP_STORAGEINFO_FREESPACEIMAGES(256);

  final int value;
  const CameraStorageInfoFields(this.value);

  static CameraStorageInfoFields fromValue(int value) => switch (value) {
    1 => GP_STORAGEINFO_BASE,
    2 => GP_STORAGEINFO_LABEL,
    4 => GP_STORAGEINFO_DESCRIPTION,
    8 => GP_STORAGEINFO_ACCESS,
    16 => GP_STORAGEINFO_STORAGETYPE,
    32 => GP_STORAGEINFO_FILESYSTEMTYPE,
    64 => GP_STORAGEINFO_MAXCAPACITY,
    128 => GP_STORAGEINFO_FREESPACEKBYTES,
    256 => GP_STORAGEINFO_FREESPACEIMAGES,
    _ => throw ArgumentError(
      'Unknown value for CameraStorageInfoFields: $value',
    ),
  };
}

/// \brief Hardware storage types.
///
/// Type of hardware this storage is on. The types and values
/// are the same as the PTP standard uses (PTP_ST_xxx).
enum CameraStorageType {
  /// < \brief Unknown storage type.
  GP_STORAGEINFO_ST_UNKNOWN(0),

  /// < \brief A fixed ROM storage.
  GP_STORAGEINFO_ST_FIXED_ROM(1),

  /// < \brief A removable ROM storage.
  GP_STORAGEINFO_ST_REMOVABLE_ROM(2),

  /// < \brief A fixed RAM storage. (e.g. SDRAM)
  GP_STORAGEINFO_ST_FIXED_RAM(3),

  /// < \brief A removable RAM storage. (any kind of cards etc)
  GP_STORAGEINFO_ST_REMOVABLE_RAM(4);

  final int value;
  const CameraStorageType(this.value);

  static CameraStorageType fromValue(int value) => switch (value) {
    0 => GP_STORAGEINFO_ST_UNKNOWN,
    1 => GP_STORAGEINFO_ST_FIXED_ROM,
    2 => GP_STORAGEINFO_ST_REMOVABLE_ROM,
    3 => GP_STORAGEINFO_ST_FIXED_RAM,
    4 => GP_STORAGEINFO_ST_REMOVABLE_RAM,
    _ => throw ArgumentError('Unknown value for CameraStorageType: $value'),
  };
}

/// \brief Storage access modes.
///
/// The modes we can access the storage with. Uses the same
/// types and values as the PTP standard (PTP_AC_xxx).
enum CameraStorageAccessType {
  /// < \brief Storage is Read / Write.
  GP_STORAGEINFO_AC_READWRITE(0),

  /// < \brief Storage is Ready Only.
  GP_STORAGEINFO_AC_READONLY(1),

  /// < \brief Storage is Ready Only, but allows Delete.
  GP_STORAGEINFO_AC_READONLY_WITH_DELETE(2);

  final int value;
  const CameraStorageAccessType(this.value);

  static CameraStorageAccessType fromValue(int value) => switch (value) {
    0 => GP_STORAGEINFO_AC_READWRITE,
    1 => GP_STORAGEINFO_AC_READONLY,
    2 => GP_STORAGEINFO_AC_READONLY_WITH_DELETE,
    _ => throw ArgumentError(
      'Unknown value for CameraStorageAccessType: $value',
    ),
  };
}

/// \brief Filesystem hierarchy types.
///
/// The type of the filesystem hierarchy the devices uses.
/// Same types and values as the PTP standard defines (PTP_FST_xxx).
enum CameraStorageFilesystemType {
  /// < \brief Undefined or unknown filesystem hierarchy.
  GP_STORAGEINFO_FST_UNDEFINED(0),

  /// < \brief Generic flat storage (all in 1 directory).
  GP_STORAGEINFO_FST_GENERICFLAT(1),

  /// < \brief Generic tree hierarchy.
  GP_STORAGEINFO_FST_GENERICHIERARCHICAL(2),

  /// < \brief DCIM style storage.
  GP_STORAGEINFO_FST_DCF(3);

  final int value;
  const CameraStorageFilesystemType(this.value);

  static CameraStorageFilesystemType fromValue(int value) => switch (value) {
    0 => GP_STORAGEINFO_FST_UNDEFINED,
    1 => GP_STORAGEINFO_FST_GENERICFLAT,
    2 => GP_STORAGEINFO_FST_GENERICHIERARCHICAL,
    3 => GP_STORAGEINFO_FST_DCF,
    _ => throw ArgumentError(
      'Unknown value for CameraStorageFilesystemType: $value',
    ),
  };
}

/// \brief Storage information structure.
///
/// This structure contains the information of a specific camera storage.
/// Only the members as specified by the \a fields member are valid.
final class _CameraStorageInformation extends ffi.Struct {
  /// < \brief Bitmask of struct members that are specified.
  @ffi.UnsignedInt()
  external int fieldsAsInt;

  CameraStorageInfoFields get fields =>
      CameraStorageInfoFields.fromValue(fieldsAsInt);

  /// < \brief Basedirectory of the storage. Will be "/" if just 1 storage on the camera.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> basedir;

  /// < \brief Label of the storage. Similar to DOS label.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> label;

  /// < \brief Description of the storage.
  @ffi.Array.multi([256])
  external ffi.Array<ffi.Char> description;

  /// < \brief Hardware type of the storage.
  @ffi.UnsignedInt()
  external int typeAsInt;

  CameraStorageType get type => CameraStorageType.fromValue(typeAsInt);

  /// < \brief Hierarchy type of the filesystem.
  @ffi.UnsignedInt()
  external int fstypeAsInt;

  CameraStorageFilesystemType get fstype =>
      CameraStorageFilesystemType.fromValue(fstypeAsInt);

  /// < \brief Access permissions.
  @ffi.UnsignedInt()
  external int accessAsInt;

  CameraStorageAccessType get access =>
      CameraStorageAccessType.fromValue(accessAsInt);

  /// < \brief Total capacity in kbytes.
  @ffi.Uint64()
  external int capacitykbytes;

  /// < \brief Free space in kbytes.
  @ffi.Uint64()
  external int freekbytes;

  /// < \brief Free space in images (guessed by camera).
  @ffi.Uint64()
  external int freeimages;
}

/// \brief Storage information structure.
///
/// This structure contains the information of a specific camera storage.
/// Only the members as specified by the \a fields member are valid.
typedef CameraStorageInformation = _CameraStorageInformation;
typedef CameraFilesystemListFuncFunction =
    ffi.Int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<CameraList> list,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraFilesystemListFuncFunction =
    int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<CameraList> list,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef CameraFilesystemListFunc =
    ffi.Pointer<ffi.NativeFunction<CameraFilesystemListFuncFunction>>;
typedef CameraFilesystemSetInfoFuncFunction =
    ffi.Int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      CameraFileInfo info,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraFilesystemSetInfoFuncFunction =
    int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      CameraFileInfo info,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef CameraFilesystemSetInfoFunc =
    ffi.Pointer<ffi.NativeFunction<CameraFilesystemSetInfoFuncFunction>>;
typedef CameraFilesystemGetInfoFuncFunction =
    ffi.Int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      ffi.Pointer<CameraFileInfo> info,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraFilesystemGetInfoFuncFunction =
    int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      ffi.Pointer<CameraFileInfo> info,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef CameraFilesystemGetInfoFunc =
    ffi.Pointer<ffi.NativeFunction<CameraFilesystemGetInfoFuncFunction>>;
typedef CameraFilesystemGetFileFuncFunction =
    ffi.Int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      ffi.UnsignedInt type,
      ffi.Pointer<CameraFile> file,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraFilesystemGetFileFuncFunction =
    int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      CameraFileType type,
      ffi.Pointer<CameraFile> file,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef CameraFilesystemGetFileFunc =
    ffi.Pointer<ffi.NativeFunction<CameraFilesystemGetFileFuncFunction>>;
typedef CameraFilesystemReadFileFuncFunction =
    ffi.Int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      ffi.UnsignedInt type,
      ffi.Uint64 offset,
      ffi.Pointer<ffi.Char> buf,
      ffi.Pointer<ffi.Uint64> size,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraFilesystemReadFileFuncFunction =
    int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      CameraFileType type,
      int offset,
      ffi.Pointer<ffi.Char> buf,
      ffi.Pointer<ffi.Uint64> size,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef CameraFilesystemReadFileFunc =
    ffi.Pointer<ffi.NativeFunction<CameraFilesystemReadFileFuncFunction>>;
typedef CameraFilesystemDeleteFileFuncFunction =
    ffi.Int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraFilesystemDeleteFileFuncFunction =
    int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef CameraFilesystemDeleteFileFunc =
    ffi.Pointer<ffi.NativeFunction<CameraFilesystemDeleteFileFuncFunction>>;
typedef CameraFilesystemPutFileFuncFunction =
    ffi.Int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      ffi.UnsignedInt type,
      ffi.Pointer<CameraFile> file,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraFilesystemPutFileFuncFunction =
    int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> filename,
      CameraFileType type,
      ffi.Pointer<CameraFile> file,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef CameraFilesystemPutFileFunc =
    ffi.Pointer<ffi.NativeFunction<CameraFilesystemPutFileFuncFunction>>;
typedef CameraFilesystemDeleteAllFuncFunction =
    ffi.Int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraFilesystemDeleteAllFuncFunction =
    int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef CameraFilesystemDeleteAllFunc =
    ffi.Pointer<ffi.NativeFunction<CameraFilesystemDeleteAllFuncFunction>>;
typedef CameraFilesystemDirFuncFunction =
    ffi.Int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraFilesystemDirFuncFunction =
    int Function(
      ffi.Pointer<CameraFilesystem> fs,
      ffi.Pointer<ffi.Char> folder,
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<ffi.Void> data,
      ffi.Pointer<GPContext> context,
    );
typedef CameraFilesystemDirFunc =
    ffi.Pointer<ffi.NativeFunction<CameraFilesystemDirFuncFunction>>;
typedef CameraFilesystemStorageInfoFuncFunction =
    ffi.Int Function(
      ffi.Pointer<CameraFilesystem>,
      ffi.Pointer<ffi.Pointer<CameraStorageInformation>>,
      ffi.Pointer<ffi.Int>,
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<GPContext>,
    );
typedef DartCameraFilesystemStorageInfoFuncFunction =
    int Function(
      ffi.Pointer<CameraFilesystem>,
      ffi.Pointer<ffi.Pointer<CameraStorageInformation>>,
      ffi.Pointer<ffi.Int>,
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<GPContext>,
    );
typedef CameraFilesystemStorageInfoFunc =
    ffi.Pointer<ffi.NativeFunction<CameraFilesystemStorageInfoFuncFunction>>;

final class _CameraFilesystemFuncs extends ffi.Struct {
  external CameraFilesystemListFunc file_list_func;

  external CameraFilesystemListFunc folder_list_func;

  external CameraFilesystemPutFileFunc put_file_func;

  external CameraFilesystemDeleteAllFunc delete_all_func;

  external CameraFilesystemGetInfoFunc get_info_func;

  external CameraFilesystemSetInfoFunc set_info_func;

  external CameraFilesystemDirFunc make_dir_func;

  external CameraFilesystemDirFunc remove_dir_func;

  external CameraFilesystemGetFileFunc get_file_func;

  external CameraFilesystemReadFileFunc read_file_func;

  external CameraFilesystemDeleteFileFunc del_file_func;

  external CameraFilesystemStorageInfoFunc storage_info_func;

  @ffi.Array.multi([31])
  external ffi.Array<ffi.Pointer<ffi.Void>> unused;
}

typedef CameraFilesystemFuncs = _CameraFilesystemFuncs;
typedef CameraTimeoutFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraTimeoutFuncFunction =
    int Function(ffi.Pointer<Camera> camera, ffi.Pointer<GPContext> context);

/// \name Some cameras need 'keep-alive-messages'.
/// @{
typedef CameraTimeoutFunc =
    ffi.Pointer<ffi.NativeFunction<CameraTimeoutFuncFunction>>;
typedef CameraTimeoutStartFuncFunction =
    ffi.UnsignedInt Function(
      ffi.Pointer<Camera> camera,
      ffi.UnsignedInt timeout,
      CameraTimeoutFunc func,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartCameraTimeoutStartFuncFunction =
    int Function(
      ffi.Pointer<Camera> camera,
      int timeout,
      CameraTimeoutFunc func,
      ffi.Pointer<ffi.Void> data,
    );
typedef CameraTimeoutStartFunc =
    ffi.Pointer<ffi.NativeFunction<CameraTimeoutStartFuncFunction>>;
typedef CameraTimeoutStopFuncFunction =
    ffi.Void Function(
      ffi.Pointer<Camera> camera,
      ffi.UnsignedInt id,
      ffi.Pointer<ffi.Void> data,
    );
typedef DartCameraTimeoutStopFuncFunction =
    void Function(
      ffi.Pointer<Camera> camera,
      int id,
      ffi.Pointer<ffi.Void> data,
    );
typedef CameraTimeoutStopFunc =
    ffi.Pointer<ffi.NativeFunction<CameraTimeoutStopFuncFunction>>;
typedef CameraLibraryIdFuncFunction =
    ffi.Int Function(ffi.Pointer<CameraText> id);
typedef DartCameraLibraryIdFuncFunction =
    int Function(ffi.Pointer<CameraText> id);

/// \brief Returns a unique id for the camera driver.
///
/// \param id a #CameraText
/// \return a gphoto2 error code
typedef CameraLibraryIdFunc =
    ffi.Pointer<ffi.NativeFunction<CameraLibraryIdFuncFunction>>;
typedef CameraLibraryAbilitiesFuncFunction =
    ffi.Int Function(ffi.Pointer<CameraAbilitiesList> list);
typedef DartCameraLibraryAbilitiesFuncFunction =
    int Function(ffi.Pointer<CameraAbilitiesList> list);

/// \brief Adds the abilities of the supported models to the supplied list.
///
/// \param list a #CameraAbilitiesList
/// \return a gphoto2 error code
typedef CameraLibraryAbilitiesFunc =
    ffi.Pointer<ffi.NativeFunction<CameraLibraryAbilitiesFuncFunction>>;
typedef CameraLibraryInitFuncFunction =
    ffi.Int Function(
      ffi.Pointer<Camera> camera,
      ffi.Pointer<GPContext> context,
    );
typedef DartCameraLibraryInitFuncFunction =
    int Function(ffi.Pointer<Camera> camera, ffi.Pointer<GPContext> context);

/// \brief Initializes the camera.
///
/// \param camera a #Camera
/// \param context a #GPContext
/// \return a gphoto2 error code
///
/// The camera driver will establish a first connection
/// to the camera and configure the camera variable (i.e. using
/// #gp_filesystem_set_list_funcs or #gp_port_get_settings).
typedef CameraLibraryInitFunc =
    ffi.Pointer<ffi.NativeFunction<CameraLibraryInitFuncFunction>>;
typedef gp_settings_funcFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Char>,
      ffi.Pointer<ffi.Char>,
      ffi.Pointer<ffi.Char>,
      ffi.Pointer<ffi.Void>,
    );
typedef Dartgp_settings_funcFunction =
    int Function(
      ffi.Pointer<ffi.Char>,
      ffi.Pointer<ffi.Char>,
      ffi.Pointer<ffi.Char>,
      ffi.Pointer<ffi.Void>,
    );
typedef gp_settings_func =
    ffi.Pointer<ffi.NativeFunction<gp_settings_funcFunction>>;

const int GP_PORT_USB_ENDPOINT_IN = 0;

const int GP_PORT_USB_ENDPOINT_OUT = 1;

const int GP_PORT_USB_ENDPOINT_INT = 2;

const int TRUE = 1;

const int FALSE = 0;

const int GP_PORT_MAX_BUF_LEN = 4096;

const int PIN_CTS = 2;

const int __GNUC_VA_LIST = 1;

const int GP_LOG_ALL = 3;

const int GP_OK = 0;

const int GP_ERROR = -1;

const int GP_ERROR_BAD_PARAMETERS = -2;

const int GP_ERROR_NO_MEMORY = -3;

const int GP_ERROR_LIBRARY = -4;

const int GP_ERROR_UNKNOWN_PORT = -5;

const int GP_ERROR_NOT_SUPPORTED = -6;

const int GP_ERROR_IO = -7;

const int GP_ERROR_FIXED_LIMIT_EXCEEDED = -8;

const int GP_ERROR_TIMEOUT = -10;

const int GP_ERROR_IO_SUPPORTED_SERIAL = -20;

const int GP_ERROR_IO_SUPPORTED_USB = -21;

const int GP_ERROR_IO_INIT = -31;

const int GP_ERROR_IO_READ = -34;

const int GP_ERROR_IO_WRITE = -35;

const int GP_ERROR_IO_UPDATE = -37;

const int GP_ERROR_IO_SERIAL_SPEED = -41;

const int GP_ERROR_IO_USB_CLEAR_HALT = -51;

const int GP_ERROR_IO_USB_FIND = -52;

const int GP_ERROR_IO_USB_CLAIM = -53;

const int GP_ERROR_IO_LOCK = -60;

const int GP_ERROR_HAL = -70;

const int _TIME_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 35;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int NULL = 0;

const int _BITS_TIME_H = 1;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __clock_t_defined = 1;

const int __time_t_defined = 1;

const int __struct_tm_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int __clockid_t_defined = 1;

const int __timer_t_defined = 1;

const int __itimerspec_defined = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int TIME_UTC = 1;

const int _STDINT_H = 1;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int _BITS_WCHAR_H = 1;

const int __WCHAR_MAX = 2147483647;

const int __WCHAR_MIN = -2147483648;

const int _BITS_STDINT_INTN_H = 1;

const int _BITS_STDINT_UINTN_H = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -9223372036854775808;

const int INT_FAST32_MIN = -9223372036854775808;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 9223372036854775807;

const int INT_FAST32_MAX = 9223372036854775807;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = -1;

const int UINT_FAST32_MAX = -1;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int SIZE_MAX = -1;

const int WCHAR_MIN = -2147483648;

const int WCHAR_MAX = 2147483647;

const int WINT_MIN = 0;

const int WINT_MAX = 4294967295;

const String GP_MIME_TXT = 'text/plain';

const String GP_MIME_WAV = 'audio/wav';

const String GP_MIME_RAW = 'image/x-raw';

const String GP_MIME_PNG = 'image/png';

const String GP_MIME_PGM = 'image/x-portable-graymap';

const String GP_MIME_PPM = 'image/x-portable-pixmap';

const String GP_MIME_PNM = 'image/x-portable-anymap';

const String GP_MIME_JPEG = 'image/jpeg';

const String GP_MIME_TIFF = 'image/tiff';

const String GP_MIME_BMP = 'image/bmp';

const String GP_MIME_QTKN = 'image/qtkn';

const String GP_MIME_QTKT = 'image/qtkt';

const String GP_MIME_QUICKTIME = 'video/quicktime';

const String GP_MIME_AVI = 'video/x-msvideo';

const String GP_MIME_CRW = 'image/x-canon-raw';

const String GP_MIME_CR2 = 'image/x-canon-cr2';

const String GP_MIME_CR3 = 'image/x-canon-cr3';

const String GP_MIME_NEF = 'image/x-nikon-nef';

const String GP_MIME_UNKNOWN = 'application/octet-stream';

const String GP_MIME_EXIF = 'application/x-exif';

const String GP_MIME_MP3 = 'audio/mpeg';

const String GP_MIME_OGG = 'application/ogg';

const String GP_MIME_WMA = 'audio/x-wma';

const String GP_MIME_ASF = 'audio/x-asf';

const String GP_MIME_MPEG = 'video/mpeg';

const String GP_MIME_AVCHD = 'video/mp2t';

const String GP_MIME_MPO = 'video/mpo';

const String GP_MIME_RW2 = 'image/x-panasonic-raw2';

const String GP_MIME_ARW = 'image/x-sony-arw';

const String GP_MIME_RAF = 'image/x-fuji-raf';

const int GP_ERROR_CORRUPTED_DATA = -102;

const int GP_ERROR_FILE_EXISTS = -103;

const int GP_ERROR_MODEL_NOT_FOUND = -105;

const int GP_ERROR_DIRECTORY_NOT_FOUND = -107;

const int GP_ERROR_FILE_NOT_FOUND = -108;

const int GP_ERROR_DIRECTORY_EXISTS = -109;

const int GP_ERROR_CAMERA_BUSY = -110;

const int GP_ERROR_PATH_NOT_ABSOLUTE = -111;

const int GP_ERROR_CANCEL = -112;

const int GP_ERROR_CAMERA_ERROR = -113;

const int GP_ERROR_OS_FAILURE = -114;

const int GP_ERROR_NO_SPACE = -115;
